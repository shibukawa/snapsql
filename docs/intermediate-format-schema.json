{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/shibukawa/snapsql/schemas/intermediate-format.json",
  "title": "SnapSQL Intermediate Format",
  "description": "Enhanced intermediate format with variable dependency analysis for SnapSQL templates",
  "type": "object",
  "required": ["source", "instructions", "dependencies", "metadata"],
  "properties": {
    "source": {
      "type": "object",
      "description": "Information about the original template file",
      "required": ["file", "content", "hash"],
      "properties": {
        "file": {
          "type": "string",
          "description": "Path to the original template file"
        },
        "content": {
          "type": "string",
          "description": "Original template content"
        },
        "hash": {
          "type": "string",
          "description": "SHA-256 hash of the template content"
        }
      }
    },
    "interface_schema": {
      "type": "object",
      "description": "Optional interface schema extracted from template metadata",
      "properties": {
        "name": {
          "type": "string",
          "description": "Interface or query name"
        },
        "function_name": {
          "type": "string",
          "description": "Generated function name"
        },
        "parameters": {
          "type": "array",
          "description": "Function parameters",
          "items": {
            "type": "object",
            "required": ["name", "type"],
            "properties": {
              "name": {
                "type": "string",
                "description": "Parameter name"
              },
              "type": {
                "type": "string",
                "description": "Parameter type"
              },
              "optional": {
                "type": "boolean",
                "description": "Whether parameter is optional"
              },
              "description": {
                "type": "string",
                "description": "Parameter description"
              }
            }
          }
        },
        "result_type": {
          "type": "object",
          "description": "Expected result structure",
          "properties": {
            "name": {
              "type": "string",
              "description": "Result type name"
            },
            "fields": {
              "type": "array",
              "description": "Result fields",
              "items": {
                "type": "object",
                "required": ["name", "type"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Field name"
                  },
                  "type": {
                    "type": "string",
                    "description": "Field type"
                  },
                  "database_tag": {
                    "type": "string",
                    "description": "Database column tag"
                  }
                }
              }
            }
          }
        }
      }
    },
    "instructions": {
      "type": "array",
      "description": "Sequence of instructions for SQL generation",
      "items": {
        "type": "object",
        "required": ["op", "pos"],
        "properties": {
          "op": {
            "type": "string",
            "enum": [
              "EMIT_LITERAL",
              "EMIT_PARAM", 
              "EMIT_EVAL",
              "JUMP",
              "JUMP_IF_EXP",
              "LABEL",
              "LOOP_START",
              "LOOP_NEXT",
              "LOOP_END",
              "NOP"
            ],
            "description": "Instruction operation"
          },
          "pos": {
            "type": "array",
            "description": "Position information [line, column, offset] from original template (required)",
            "items": {
              "type": "integer"
            },
            "minItems": 3,
            "maxItems": 3
          },
          "value": {
            "type": "string",
            "description": "Literal value for EMIT_LITERAL"
          },
          "param": {
            "type": "string",
            "description": "Parameter name for EMIT_PARAM"
          },
          "exp": {
            "type": "string",
            "description": "CEL expression for EMIT_EVAL or JUMP_IF_EXP"
          },
          "placeholder": {
            "type": "string",
            "description": "Placeholder value for 2-way SQL compatibility"
          },
          "target": {
            "type": "integer",
            "description": "Target instruction index for jumps"
          },
          "name": {
            "type": "string",
            "description": "Label name for LABEL instruction"
          },
          "variable": {
            "type": "string",
            "description": "Loop variable name"
          },
          "collection": {
            "type": "string",
            "description": "Collection expression for loops"
          },
          "end_label": {
            "type": "string",
            "description": "End label for loop start"
          },
          "start_label": {
            "type": "string",
            "description": "Start label for loop continuation"
          },
          "label": {
            "type": "string",
            "description": "Label for loop end"
          }
        }
      }
    },
    "dependencies": {
      "type": "object",
      "description": "Variable dependency information for caching optimization",
      "required": ["all_variables", "structural_variables", "parameter_variables", "cache_key_template"],
      "properties": {
        "all_variables": {
          "type": "array",
          "description": "All variables referenced in the template",
          "items": {
            "type": "string"
          }
        },
        "structural_variables": {
          "type": "array",
          "description": "Variables that affect SQL structure (if/for conditions)",
          "items": {
            "type": "string"
          }
        },
        "parameter_variables": {
          "type": "array",
          "description": "Variables that only affect parameter values",
          "items": {
            "type": "string"
          }
        },
        "dependency_graph": {
          "type": "object",
          "description": "Dependency relationships between variables",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "cache_key_template": {
          "type": "string",
          "description": "Template for generating cache keys based on structural variables"
        }
      }
    },
    "metadata": {
      "type": "object",
      "description": "Metadata about the intermediate format",
      "required": ["version", "generated_at", "generator"],
      "properties": {
        "version": {
          "type": "string",
          "description": "Intermediate format version"
        },
        "generated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Generation timestamp in ISO 8601 format"
        },
        "generator": {
          "type": "string",
          "description": "Tool that generated this intermediate format"
        },
        "schema_url": {
          "type": "string",
          "format": "uri",
          "description": "URL to the JSON schema for this format"
        }
      }
    }
  },
  "examples": [
    {
      "source": {
        "file": "queries/users.snap.sql",
        "content": "SELECT id, name /*# if include_email */, email/*# end */ FROM users WHERE id = /*= user_id */123",
        "hash": "a1b2c3d4e5f6789..."
      },
      "interface_schema": {
        "name": "GetUser",
        "function_name": "getUser",
        "parameters": [
          {
            "name": "user_id",
            "type": "int"
          },
          {
            "name": "include_email",
            "type": "bool",
            "optional": true
          }
        ]
      },
      "instructions": [
        {
          "op": "EMIT_LITERAL",
          "pos": [1, 1, 0],
          "value": "SELECT id, name"
        },
        {
          "op": "JUMP_IF_EXP",
          "pos": [1, 18, 17],
          "exp": "!include_email",
          "target": 4
        },
        {
          "op": "EMIT_LITERAL",
          "pos": [1, 42, 41],
          "value": ", email"
        },
        {
          "op": "LABEL",
          "pos": [1, 56, 55],
          "name": "end_email"
        },
        {
          "op": "EMIT_LITERAL",
          "pos": [1, 65, 64],
          "value": " FROM users WHERE id = "
        },
        {
          "op": "EMIT_PARAM",
          "pos": [1, 95, 94],
          "param": "user_id",
          "placeholder": "123"
        }
      ],
      "dependencies": {
        "all_variables": ["include_email", "user_id"],
        "structural_variables": ["include_email"],
        "parameter_variables": ["user_id"],
        "dependency_graph": {
          "include_email": ["include_email"]
        },
        "cache_key_template": "include_email"
      },
      "metadata": {
        "version": "2.0.0",
        "generated_at": "2025-06-26T12:00:00Z",
        "generator": "snapsql-compiler-v1.0.0",
        "schema_url": "https://github.com/shibukawa/snapsql/schemas/intermediate-format.json"
      }
    }
  ]
}
