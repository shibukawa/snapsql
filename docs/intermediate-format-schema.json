{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://github.com/shibukawa/snapsql/schemas/intermediate-format.json",
  "title": "SnapSQL Intermediate Format",
  "description": "JSON schema for SnapSQL intermediate format files generated from SQL templates",
  "$comment": "This schema validates the intermediate JSON files generated by the SnapSQL CLI tool from .snap.sql and .snap.md template files. Version: 1.0.0. For more information, see: https://github.com/shibukawa/snapsql",
  "type": "object",
  "required": ["source", "ast"],
  "properties": {
    "source": {
      "type": "object",
      "description": "Source file information",
      "required": ["file", "content"],
      "properties": {
        "file": {
          "type": "string",
          "description": "Absolute path to the source template file"
        },
        "content": {
          "type": "string",
          "description": "Complete content of the source template file"
        }
      },
      "additionalProperties": false
    },
    "interface_schema": {
      "type": "object",
      "description": "Interface schema extracted from template metadata",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the query template"
        },
        "description": {
          "type": "string",
          "description": "Description of the query template"
        },
        "function_name": {
          "type": "string",
          "description": "Generated function name for the query"
        },
        "parameters": {
          "type": "array",
          "description": "List of parameters for the query",
          "items": {
            "$ref": "#/definitions/parameter"
          }
        }
      },
      "additionalProperties": false
    },
    "ast": {
      "$ref": "#/definitions/ast_node",
      "description": "Abstract Syntax Tree of the parsed SQL"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "parameter": {
      "type": "object",
      "description": "Parameter definition with optional nested structure",
      "required": ["name", "type"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Parameter name"
        },
        "type": {
          "type": "string",
          "description": "Parameter type (e.g., 'int', 'string', 'bool', '[]string', 'object')"
        },
        "children": {
          "type": "array",
          "description": "Child parameters for object types",
          "items": {
            "$ref": "#/definitions/parameter"
          }
        }
      },
      "additionalProperties": false
    },
    "ast_node": {
      "type": "object",
      "description": "AST node representing parsed SQL structure",
      "required": ["type", "pos"],
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the AST node",
          "examples": [
            "SELECT_STATEMENT",
            "FROM_CLAUSE",
            "WHERE_CLAUSE",
            "ORDER_BY_CLAUSE",
            "LIMIT_CLAUSE",
            "OFFSET_CLAUSE",
            "SELECT_CLAUSE",
            "EXPRESSION",
            "IDENTIFIER",
            "LITERAL",
            "FUNCTION_CALL",
            "JOIN_CLAUSE",
            "INSERT_STATEMENT",
            "UPDATE_STATEMENT",
            "DELETE_STATEMENT",
            "CREATE_TABLE_STATEMENT",
            "DROP_TABLE_STATEMENT",
            "ALTER_TABLE_STATEMENT"
          ]
        },
        "pos": {
          "type": "array",
          "description": "Position information [line, column, offset]",
          "items": {
            "type": "integer",
            "minimum": 0
          },
          "minItems": 3,
          "maxItems": 3
        },
        "Children": {
          "type": ["object", "null"],
          "description": "Child nodes and properties specific to the node type",
          "patternProperties": {
            "^[a-zA-Z_][a-zA-Z0-9_]*$": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ast_node"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ast_node"
                  }
                },
                {
                  "type": ["string", "number", "boolean", "null"]
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  "examples": [
    {
      "source": {
        "file": "/path/to/users.snap.sql",
        "content": "SELECT * FROM users WHERE id = /*= user_id */1;"
      },
      "ast": {
        "type": "SELECT_STATEMENT",
        "pos": [1, 1, 0],
        "Children": {
          "select_clause": {
            "type": "SELECT_CLAUSE",
            "pos": [1, 1, 0],
            "Children": {
              "fields": [
                {
                  "type": "EXPRESSION",
                  "pos": [1, 8, 7],
                  "Children": {}
                }
              ]
            }
          },
          "from_clause": {
            "type": "FROM_CLAUSE",
            "pos": [1, 15, 14],
            "Children": {
              "tables": [
                {
                  "type": "IDENTIFIER",
                  "pos": [1, 20, 19],
                  "Children": {
                    "name": "users"
                  }
                }
              ]
            }
          },
          "where_clause": {
            "type": "WHERE_CLAUSE",
            "pos": [1, 26, 25],
            "Children": {
              "condition": {
                "type": "EXPRESSION",
                "pos": [1, 32, 31],
                "Children": {}
              }
            }
          }
        }
      }
    },
    {
      "source": {
        "file": "/path/to/complex.snap.sql",
        "content": "/*@\nname: user_query\ndescription: Get user data\nfunction_name: getUser\nparameters:\n  user_id: int\n  filters:\n    active: bool\n@*/\nSELECT * FROM users WHERE id = /*= user_id */1 AND active = /*= filters.active */true;"
      },
      "interface_schema": {
        "name": "user_query",
        "description": "Get user data",
        "function_name": "getUser",
        "parameters": [
          {
            "name": "user_id",
            "type": "int"
          },
          {
            "name": "filters",
            "type": "object",
            "children": [
              {
                "name": "active",
                "type": "bool"
              }
            ]
          }
        ]
      },
      "ast": {
        "type": "SELECT_STATEMENT",
        "pos": [10, 1, 120],
        "Children": {
          "select_clause": {
            "type": "SELECT_CLAUSE",
            "pos": [10, 1, 120],
            "Children": {
              "fields": [
                {
                  "type": "EXPRESSION",
                  "pos": [10, 8, 127],
                  "Children": {}
                }
              ]
            }
          }
        }
      }
    }
  ]
}
