package parsercommon

// NodeType represents the type of AST node
// This is used for type discrimination and debugging.
type NodeType int

const (
	// SQL statement structures
	UNKNOWN NodeType = iota
	SELECT_STATEMENT
	INSERT_STATEMENT
	UPDATE_STATEMENT
	DELETE_STATEMENT
	SUBQUERY_STATEMENT

	// SQL clauses
	SELECT_CLAUSE
	FROM_CLAUSE
	WHERE_CLAUSE
	ORDER_BY_CLAUSE
	GROUP_BY_CLAUSE
	HAVING_CLAUSE
	LIMIT_CLAUSE
	OFFSET_CLAUSE
	SET_CLAUSE
	WITH_CLAUSE
	CTE_DEFINITION

	// SnapSQL extensions
	TEMPLATE_IF_BLOCK
	TEMPLATE_ELSEIF_BLOCK
	TEMPLATE_ELSE_BLOCK
	TEMPLATE_FOR_BLOCK
	VARIABLE_SUBSTITUTION
	DEFERRED_VARIABLE_SUBSTITUTION
	BULK_VARIABLE_SUBSTITUTION
	ENVIRONMENT_REFERENCE
	IMPLICIT_CONDITIONAL

	// Expressions and literals
	IDENTIFIER
	LITERAL
	EXPRESSION

	// Others
	OTHER_NODE
	RETURNING_CLAUSE

	// Column reference
	COLUMN_REFERENCE
	LAST_NODE_TYPE
)

// String returns string representation of NodeType
func (n NodeType) String() string {
	switch n {
	case SELECT_STATEMENT:
		return "SELECT_STATEMENT"
	case INSERT_STATEMENT:
		return "INSERT_STATEMENT"
	case UPDATE_STATEMENT:
		return "UPDATE_STATEMENT"
	case DELETE_STATEMENT:
		return "DELETE_STATEMENT"
	case SELECT_CLAUSE:
		return "SELECT_CLAUSE"
	case FROM_CLAUSE:
		return "FROM_CLAUSE"
	case WHERE_CLAUSE:
		return "WHERE_CLAUSE"
	case ORDER_BY_CLAUSE:
		return "ORDER_BY_CLAUSE"
	case GROUP_BY_CLAUSE:
		return "GROUP_BY_CLAUSE"
	case HAVING_CLAUSE:
		return "HAVING_CLAUSE"
	case LIMIT_CLAUSE:
		return "LIMIT_CLAUSE"
	case OFFSET_CLAUSE:
		return "OFFSET_CLAUSE"
	case WITH_CLAUSE:
		return "WITH_CLAUSE"
	case CTE_DEFINITION:
		return "CTE_DEFINITION"
	case TEMPLATE_IF_BLOCK:
		return "TEMPLATE_IF_BLOCK"
	case TEMPLATE_ELSEIF_BLOCK:
		return "TEMPLATE_ELSEIF_BLOCK"
	case TEMPLATE_ELSE_BLOCK:
		return "TEMPLATE_ELSE_BLOCK"
	case TEMPLATE_FOR_BLOCK:
		return "TEMPLATE_FOR_BLOCK"
	case VARIABLE_SUBSTITUTION:
		return "VARIABLE_SUBSTITUTION"
	case BULK_VARIABLE_SUBSTITUTION:
		return "BULK_VARIABLE_SUBSTITUTION"
	case ENVIRONMENT_REFERENCE:
		return "ENVIRONMENT_REFERENCE"
	case IMPLICIT_CONDITIONAL:
		return "IMPLICIT_CONDITIONAL"
	case IDENTIFIER:
		return "IDENTIFIER"
	case LITERAL:
		return "LITERAL"
	case EXPRESSION:
		return "EXPRESSION"
	case OTHER_NODE:
		return "OTHER_NODE"
	case RETURNING_CLAUSE:
		return "RETURNING_CLAUSE"
	case COLUMN_REFERENCE:
		return "COLUMN_REFERENCE"
	default:
		return "UNKNOWN"
	}
}
