//go:build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package gosample

import (
	"context"
	"fmt"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

type AccountUpdateResult struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

// AccountUpdate specific CEL programs and mock path
var (
	accountUpdatePrograms []cel.Program
)

const accountUpdateMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0 (container: root)
	{
		// Build CEL env options
		opts := []cel.EnvOption{
			cel.Container("root"),
		}
		opts = append(opts, cel.Variable("account_id", cel.IntType))
		opts = append(opts, cel.Variable("status", cel.StringType))
		opts = append(opts, cel.Variable("account_id", cel.IntType))
		opts = append(opts, cel.Variable("status", cel.StringType))
		opts = append(opts,
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
		)
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create AccountUpdate CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}

	// Create programs for each expression using the corresponding environment
	accountUpdatePrograms = make([]cel.Program, 2)
	// expr_001: "status" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("status")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "status", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "status", err))
		}
		accountUpdatePrograms[0] = program
	}
	// expr_002: "account_id" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("account_id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "account_id", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "account_id", err))
		}
		accountUpdatePrograms[1] = program
	}
}

// AccountUpdate - []AccountUpdateResult Affinity
func AccountUpdate(ctx context.Context, executor snapsqlgo.DBExecutor, accountID int, status string, opts ...snapsqlgo.FuncOpt) ([]AccountUpdateResult, error) {
	var result []AccountUpdateResult

	// Hierarchical metas (for nested aggregation code generation - placeholder)
	// Count: 0

	execCtx := snapsqlgo.ExtractExecutionContext(ctx)
	rowLockMode := snapsqlgo.RowLockNone
	if execCtx != nil {
		rowLockMode = execCtx.RowLockMode()
	}
	if rowLockMode != snapsqlgo.RowLockNone {
		snapsqlgo.EnsureRowLockAllowed(snapsqlgo.QueryLogQueryTypeExec, rowLockMode)
	}
	rowLockClause := ""
	if rowLockMode != snapsqlgo.RowLockNone {
		var rowLockErr error
		rowLockClause, rowLockErr = snapsqlgo.BuildRowLockClause("sqlite", rowLockMode)
		if rowLockErr != nil {
			panic(rowLockErr)
		}
	}
	queryLogOptions := snapsqlgo.QueryOptionsSnapshot{
		RowLockClause: rowLockClause,
		RowLockMode:   rowLockMode,
	}
	var whereMeta *snapsqlgo.WhereClauseMeta
	whereMeta = &snapsqlgo.WhereClauseMeta{
		Status:  snapsqlgo.WhereClauseStatusExists,
		RawText: "WHERE",
	}
	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		query := "UPDATE accounts SET status = $1   WHERE id = $2   RETURNING id, status"
		args := make([]any, 0)
		paramMap := map[string]any{
			"account_id": accountID,
			"status":     status,
		}

		evalRes0, _, err := accountUpdatePrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("AccountUpdate: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes0))

		evalRes1, _, err := accountUpdatePrograms[1].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("AccountUpdate: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes1))
		return query, args, nil
	}
	query, args, err := buildQueryAndArgs()
	if err != nil {
		return result, err
	}
	// Enforce WHERE clause guard when mutations are generated
	if err := snapsqlgo.EnforceNonEmptyWhereClause(ctx, "AccountUpdate", snapsqlgo.MutationUpdate, whereMeta, query); err != nil {
		return result, err
	}
	// Handle mock execution if present
	// Handle mock execution if present
	if mockExec, mockMatched, mockErr := snapsqlgo.MatchMock(ctx, "AccountUpdate"); mockMatched {
		if mockErr != nil {
			return result, mockErr
		}
		if mockExec.Err != nil {
			return result, mockExec.Err
		}
		mapped, err := snapsqlgo.MapMockExecutionToSlice[AccountUpdateResult](mockExec)
		if err != nil {
			return result, fmt.Errorf("AccountUpdate: failed to map mock execution: %w", err)
		}
		result = mapped
		return result, nil
	}
	// Prepare query logger
	logger := execCtx.QueryLogger()
	logger.SetQuery(query, args)
	defer logger.Write(ctx, func() (snapsqlgo.QueryLogMetadata, snapsqlgo.DBExecutor) {
		return snapsqlgo.QueryLogMetadata{
			FuncName:   "AccountUpdate",
			SourceFile: "gosample/AccountUpdate",
			Dialect:    "sqlite",
			QueryType:  snapsqlgo.QueryLogQueryTypeExec,
			Options:    queryLogOptions,
		}, executor
	})
	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		err = fmt.Errorf("AccountUpdate: failed to prepare statement: %w (query: %s)", err, query)
		return result, err
	}
	defer stmt.Close()
	// Execute query and scan multiple rows (many affinity)
	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		err = fmt.Errorf("AccountUpdate: failed to execute query: %w", err)
		return result, err
	}
	defer rows.Close()

	for rows.Next() {
		var item AccountUpdateResult
		if err := rows.Scan(
			&item.ID,
			&item.Status,
		); err != nil {
			err = fmt.Errorf("AccountUpdate: failed to scan row: %w", err)
			return result, err
		}

		result = append(result, item)
	}

	if err := rows.Err(); err != nil {
		err = fmt.Errorf("AccountUpdate: error iterating rows: %w", err)
		return result, err
	}

	return result, nil
}
