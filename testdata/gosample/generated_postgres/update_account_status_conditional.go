//go:build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package gosamplepg

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// UpdateAccountStatusConditional specific CEL programs and mock path
var (
	updateAccountStatusConditionalPrograms []cel.Program
)

const updateAccountStatusConditionalMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0 (container: root)
	{
		// Build CEL env options
		opts := []cel.EnvOption{
			cel.Container("root"),
		}
		opts = append(opts, cel.Variable("status", cel.StringType))
		opts = append(opts, cel.Variable("account_id", cel.IntType))
		opts = append(opts, cel.Variable("include_filter", cel.BoolType))
		opts = append(opts, cel.Variable("status", cel.StringType))
		opts = append(opts, cel.Variable("account_id", cel.IntType))
		opts = append(opts, cel.Variable("include_filter", cel.BoolType))
		opts = append(opts,
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
		)
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create UpdateAccountStatusConditional CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}

	// Create programs for each expression using the corresponding environment
	updateAccountStatusConditionalPrograms = make([]cel.Program, 3)
	// expr_001: "status" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("status")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "status", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "status", err))
		}
		updateAccountStatusConditionalPrograms[0] = program
	}
	// expr_002: "include_filter" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("include_filter")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "include_filter", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "include_filter", err))
		}
		updateAccountStatusConditionalPrograms[1] = program
	}
	// expr_003: "account_id" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("account_id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "account_id", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "account_id", err))
		}
		updateAccountStatusConditionalPrograms[2] = program
	}
}

// UpdateAccountStatusConditional - sql.Result Affinity
func UpdateAccountStatusConditional(ctx context.Context, executor snapsqlgo.DBExecutor, status string, accountID int, includeFilter bool, opts ...snapsqlgo.FuncOpt) (sql.Result, error) {
	var result sql.Result

	// Hierarchical metas (for nested aggregation code generation - placeholder)
	// Count: 0

	execCtx := snapsqlgo.ExtractExecutionContext(ctx)
	rowLockMode := snapsqlgo.RowLockNone
	if execCtx != nil {
		rowLockMode = execCtx.RowLockMode()
	}
	if rowLockMode != snapsqlgo.RowLockNone {
		snapsqlgo.EnsureRowLockAllowed(snapsqlgo.QueryLogQueryTypeExec, rowLockMode)
	}
	rowLockClause := ""
	if rowLockMode != snapsqlgo.RowLockNone {
		var rowLockErr error
		rowLockClause, rowLockErr = snapsqlgo.BuildRowLockClause("postgres", rowLockMode)
		if rowLockErr != nil {
			panic(rowLockErr)
		}
	}
	queryLogOptions := snapsqlgo.QueryOptionsSnapshot{
		RowLockClause: rowLockClause,
		RowLockMode:   rowLockMode,
	}
	var whereMeta *snapsqlgo.WhereClauseMeta
	whereMeta = &snapsqlgo.WhereClauseMeta{
		Status: snapsqlgo.WhereClauseStatusConditional,
		RemovalCombos: [][]snapsqlgo.RemovalLiteral{
			{
				{ExprIndex: 1, When: false},
			},
		},
		ExpressionRefs: []int{1},
		DynamicConditions: []snapsqlgo.WhereDynamicCondition{
			{
				ExprIndex:        1,
				NegatedWhenEmpty: true,
				Description:      "include_filter",
			},
		},
		RawText: "WHERE",
	}
	fallbackGuardTriggered := false

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		var builder strings.Builder
		args := make([]any, 0)
		fallbackGuardTriggered = false
		paramMap := map[string]any{
			"status":         status,
			"account_id":     accountID,
			"include_filter": includeFilter,
		}
		{ // append static fragment
			_frag := "UPDATE accounts SET status = $1"
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}
		// Evaluate expression 0
		evalRes0, _, err := updateAccountStatusConditionalPrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("UpdateAccountStatusConditional: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes0))
		{ // append static fragment
			_frag := "  WHERE "
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}
		// IF condition: expression 1
		condResult, _, err := updateAccountStatusConditionalPrograms[1].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("UpdateAccountStatusConditional: failed to evaluate condition: %w", err)
		}
		if snapsqlgo.Truthy(condResult) {
			{ // append static fragment
				_frag := " id = $2"
				if builder.Len() > 0 {
					builder.WriteByte(' ')
				}
				builder.WriteString(_frag)
			}
			// Evaluate expression 2
			evalRes1, _, err := updateAccountStatusConditionalPrograms[2].Eval(paramMap)
			if err != nil {
				return "", nil, fmt.Errorf("UpdateAccountStatusConditional: failed to evaluate expression: %w", err)
			}
			args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes1))
			{ // append static fragment
				_frag := " "
				if builder.Len() > 0 {
					builder.WriteByte(' ')
				}
				builder.WriteString(_frag)
			}
		}
		{ // append static fragment
			_frag := " "
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}
		{
			fallbackActive1 := false
			fallbackEval1_1, _, err := updateAccountStatusConditionalPrograms[1].Eval(paramMap)
			if err != nil {
				return "", nil, fmt.Errorf("UpdateAccountStatusConditional: failed to evaluate condition: %w", err)
			}
			fallbackCond1_1 := snapsqlgo.Truthy(fallbackEval1_1)
			comboActive1_0 := true
			if !(!fallbackCond1_1) {
				comboActive1_0 = false
			}
			if comboActive1_0 {
				fallbackActive1 = true
			}
			if fallbackActive1 {
				if builder.Len() > 0 {
					builder.WriteString(" ")
				}
				builder.WriteString("1 = 1")
				if fallbackActive1 {
					fallbackGuardTriggered = true
				}
			}
		}

		query := strings.TrimSpace(builder.String())
		return query, args, nil
	}
	query, args, err := buildQueryAndArgs()
	if err != nil {
		return nil, err
	}
	if whereMeta != nil {
		whereMeta.FallbackTriggered = fallbackGuardTriggered
	}
	// Enforce WHERE clause guard when mutations are generated
	if err := snapsqlgo.EnforceNonEmptyWhereClause(ctx, "UpdateAccountStatusConditional", snapsqlgo.MutationUpdate, whereMeta, query); err != nil {
		return nil, err
	}
	// Handle mock execution if present
	if mockExec, mockMatched, mockErr := snapsqlgo.MatchMock(ctx, "UpdateAccountStatusConditional"); mockMatched {
		if mockErr != nil {
			return nil, mockErr
		}
		if mockExec.Err != nil {
			return nil, mockExec.Err
		}
		mockResult := mockExec.SQLResult()
		if mockResult == nil {
			mockResult = snapsqlgo.NewMockResult(mockExec.Opt.RowsAffected, mockExec.Opt.LastInsertID)
		}
		if mockResult != nil {
			result = mockResult
		}
		return result, nil
	}
	// Prepare query logger
	logger := execCtx.QueryLogger()
	logger.SetQuery(query, args)
	defer logger.Write(ctx, func() (snapsqlgo.QueryLogMetadata, snapsqlgo.DBExecutor) {
		return snapsqlgo.QueryLogMetadata{
			FuncName:   "UpdateAccountStatusConditional",
			SourceFile: "gosamplepg/UpdateAccountStatusConditional",
			Dialect:    "postgres",
			QueryType:  snapsqlgo.QueryLogQueryTypeExec,
			Options:    queryLogOptions,
		}, executor
	})
	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		err = fmt.Errorf("UpdateAccountStatusConditional: failed to prepare statement: %w (query: %s)", err, query)
		return nil, err
	}
	defer stmt.Close()
	// Execute query (no result expected)
	execResult, err := stmt.ExecContext(ctx, args...)
	if err != nil {
		err = fmt.Errorf("UpdateAccountStatusConditional: failed to execute statement: %w", err)
		return nil, err
	}
	result = execResult

	return result, nil
}
