//go:build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package gosamplepg

import (
	"context"
	"fmt"
	"iter"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// AccountListResult represents the response structure for AccountList
type AccountListResult struct {
	ID     any  `json:"id"`
	Name   *any `json:"name"`
	Status *any `json:"status"`
}

// AccountList specific CEL programs and mock path
var (
	accountListPrograms []cel.Program
)

const accountListMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0 (container: root)
	{
		// Build CEL env options
		opts := []cel.EnvOption{
			cel.Container("root"),
		}
		opts = append(opts,
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
		)
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create AccountList CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}

	// Create programs for each expression using the corresponding environment
	accountListPrograms = make([]cel.Program, 0)
}

// AccountList - []AccountListResult Affinity
func AccountList(ctx context.Context, executor snapsqlgo.DBExecutor, opts ...snapsqlgo.FuncOpt) iter.Seq2[*AccountListResult, error] {

	execCtx := snapsqlgo.ExtractExecutionContext(ctx)
	rowLockMode := snapsqlgo.RowLockNone
	if execCtx != nil {
		rowLockMode = execCtx.RowLockMode()
	}
	if rowLockMode != snapsqlgo.RowLockNone {
		snapsqlgo.EnsureRowLockAllowed(snapsqlgo.QueryLogQueryTypeSelect, rowLockMode)
	}
	rowLockClause := ""
	if rowLockMode != snapsqlgo.RowLockNone {
		var rowLockErr error
		rowLockClause, rowLockErr = snapsqlgo.BuildRowLockClause("postgres", rowLockMode)
		if rowLockErr != nil {
			panic(rowLockErr)
		}
	}
	queryLogOptions := snapsqlgo.QueryOptionsSnapshot{
		RowLockClause: rowLockClause,
		RowLockMode:   rowLockMode,
	}

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		query := "SELECT id, name, status FROM accounts ORDER BY id DESC "
		args := make([]any, 0)
		return query, args, nil
	}
	return func(yield func(*AccountListResult, error) bool) {

		query, args, err := buildQueryAndArgs()
		if err != nil {
			_ = yield(nil, err)
			return
		}
		if queryLogOptions.RowLockClause != "" {
			query += queryLogOptions.RowLockClause
		}
		// Handle mock execution if present
		if mockExec, mockMatched, mockErr := snapsqlgo.MatchMock(ctx, "AccountList"); mockMatched {
			if mockErr != nil {
				_ = yield(nil, mockErr)
				return
			}
			if mockExec.Err != nil {
				_ = yield(nil, mockExec.Err)
				return
			}

			mapped, err := snapsqlgo.MapMockExecutionToSlice[AccountListResult](mockExec)
			if err != nil {
				_ = yield(nil, fmt.Errorf("AccountList: failed to map mock execution: %w", err))
				return
			}

			for i := range mapped {
				item := mapped[i]
				if !yield(&item, nil) {
					return
				}
			}

			return
		}
		// Prepare query logger
		logger := execCtx.QueryLogger()
		logger.SetQuery(query, args)
		defer logger.Write(ctx, func() (snapsqlgo.QueryLogMetadata, snapsqlgo.DBExecutor) {
			return snapsqlgo.QueryLogMetadata{
				FuncName:   "AccountList",
				SourceFile: "gosamplepg/AccountList",
				Dialect:    "postgres",
				QueryType:  snapsqlgo.QueryLogQueryTypeSelect,
				Options:    queryLogOptions,
			}, executor
		})
		stmt, err := executor.PrepareContext(ctx, query)
		if err != nil {
			err = fmt.Errorf("AccountList: failed to prepare statement: %w (query: %s)", err, query)
			_ = yield(nil, err)
			return
		}
		defer stmt.Close()

		rows, err := stmt.QueryContext(ctx, args...)
		if err != nil {
			err = fmt.Errorf("AccountList: failed to execute query: %w", err)
			_ = yield(nil, err)
			return
		}
		defer rows.Close()

		for rows.Next() {
			item := new(AccountListResult)
			if err := rows.Scan(
				&item.ID,
				&item.Name,
				&item.Status,
			); err != nil {
				err = fmt.Errorf("AccountList: failed to scan row: %w", err)
				_ = yield(nil, err)
				return
			}
			if !yield(item, nil) {
				return
			}
		}

		if err := rows.Err(); err != nil {
			err = fmt.Errorf("AccountList: error iterating rows: %w", err)
			_ = yield(nil, err)
			return
		}
	}
}
