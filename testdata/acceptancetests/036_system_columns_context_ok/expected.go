//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

package testgen

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// CreateUserWithSystemColumnsContext Create a new user with automatic system column handling via context.
func CreateUserWithSystemColumnsContext(ctx context.Context, executor snapsqlgo.DBExecutor, name string, email string, opts ...snapsqlgo.FuncOpt) (sql.Result, error) {
	var result sql.Result

	// Extract function configuration
	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "createuserwithsystemcolumnscontext", "sql.result")

	// Check for mock mode
	if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
		mockData, err := snapsqlgo.GetMockDataFromFiles("", funcConfig.MockDataNames)
		if err != nil {
			return result, fmt.Errorf("failed to get mock data: %w", err)
		}

		result, err = snapsqlgo.MapMockDataToStruct[sql.Result](mockData)
		if err != nil {
			return result, fmt.Errorf("failed to map mock data to sql.Result struct: %w", err)
		}

		return result, nil
	}

	// Extract implicit parameters
	implicitSpecs := []snapsqlgo.ImplicitParamSpec{
		{Name: "created_at", Type: "time.Time", Required: false},
		{Name: "updated_at", Type: "time.Time", Required: false},
		{Name: "created_by", Type: "int", Required: true},
		{Name: "version", Type: "int", Required: false},
	}
	systemValues := snapsqlgo.ExtractImplicitParams(ctx, implicitSpecs)

	// Build SQL
	query := "INSERT INTO users (name, email, created_at, updated_at, created_by, version) VALUES ($1, $2, $3, $4, $5, $6)"
	args := []any{
		name,
		email,
		systemValues["created_at"],
		systemValues["updated_at"],
		systemValues["created_by"],
		systemValues["version"],
	}

	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		return result, fmt.Errorf("failed to prepare statement: %w", err)
	}
	defer stmt.Close()

	// Execute query (no result expected)
	result, err = stmt.ExecContext(ctx, args...)
	if err != nil {
		return result, fmt.Errorf("failed to execute statement: %w", err)
	}

	return result, nil
}
