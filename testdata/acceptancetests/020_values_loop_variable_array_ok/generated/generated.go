//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package generated

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// InsertUserTags specific CEL programs and mock path
var (
	insertUserTagsPrograms []cel.Program
)

const insertUserTagsMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 2)
	// Environment 0 (container: root)
	{
		// Build CEL env options
		opts := []cel.EnvOption{
			cel.Container("root"),
		}
		opts = append(opts, cel.Variable("users", cel.ListType(types.NewObjectType("User"))))
		opts = append(opts,
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
		)
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create InsertUserTags CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}
	// Environment 1 (container: for user : users)
	{
		// Build CEL env options
		opts := []cel.EnvOption{
			cel.Container("for user : users"),
		}
		opts = append(opts, cel.Variable("user", cel.AnyType))
		env1, err := celEnvironments[0].Extend(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create InsertUserTags CEL environment 1: %v", err))
		}
		celEnvironments[1] = env1
	}

	// Create programs for each expression using the corresponding environment
	insertUserTagsPrograms = make([]cel.Program, 3)
	// expr_001: "users" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("users")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "users", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "users", err))
		}
		insertUserTagsPrograms[0] = program
	}
	// expr_002: "user.id" using environment 1
	{
		ast, issues := celEnvironments[1].Compile("user.id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "user.id", issues.Err()))
		}
		program, err := celEnvironments[1].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "user.id", err))
		}
		insertUserTagsPrograms[1] = program
	}
	// expr_003: "user.tags" using environment 1
	{
		ast, issues := celEnvironments[1].Compile("user.tags")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "user.tags", issues.Err()))
		}
		program, err := celEnvironments[1].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "user.tags", err))
		}
		insertUserTagsPrograms[2] = program
	}
}

// InsertUserTags - sql.Result Affinity
func InsertUserTags(ctx context.Context, executor snapsqlgo.DBExecutor, users []User, user any, opts ...snapsqlgo.FuncOpt) (sql.Result, error) {
	var result sql.Result

	// Hierarchical metas (for nested aggregation code generation - placeholder)
	// Count: 0

	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "insertUserTags", "sql.result")
	// Check for mock mode
	if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
		mockData, err := snapsqlgo.GetMockDataFromFiles(insertUserTagsMockPath, funcConfig.MockDataNames)
		if err != nil {
			return nil, fmt.Errorf("InsertUserTags: failed to get mock data: %w", err)
		}

		result, err = snapsqlgo.MapMockDataToStruct[sql.Result](mockData)
		if err != nil {
			return nil, fmt.Errorf("InsertUserTags: failed to map mock data to sql.Result struct: %w", err)
		}

		return result, nil
	}

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		var builder strings.Builder
		args := make([]any, 0)
		paramMap := map[string]any{
			"users": users,
		}
		{ // append static fragment
			_frag := "INSERT INTO user_tags (user_id, tag) VALUES"
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}
		// FOR loop: evaluate collection expression 0
		collectionResult0, _, err := insertUserTagsPrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("InsertUserTags: failed to evaluate collection: %w", err)
		}
		collection0 := collectionResult0.Value().([]any)
		for _, userLoopVar := range collection0 {
			paramMap["user"] = userLoopVar
			{ // append static fragment
				_frag := "(?"
				if builder.Len() > 0 {
					builder.WriteByte(' ')
				}
				builder.WriteString(_frag)
			}
			// Evaluate expression 1
			evalRes0, _, err := insertUserTagsPrograms[1].Eval(paramMap)
			if err != nil {
				return "", nil, fmt.Errorf("InsertUserTags: failed to evaluate expression: %w", err)
			}
			args = append(args, evalRes0.Value())
			{ // append static fragment
				_frag := ",?"
				if builder.Len() > 0 {
					builder.WriteByte(' ')
				}
				builder.WriteString(_frag)
			}
			// Evaluate expression 2
			evalRes1, _, err := insertUserTagsPrograms[2].Eval(paramMap)
			if err != nil {
				return "", nil, fmt.Errorf("InsertUserTags: failed to evaluate expression: %w", err)
			}
			args = append(args, evalRes1.Value())
			{ // append static fragment
				_frag := ")"
				if builder.Len() > 0 {
					builder.WriteByte(' ')
				}
				builder.WriteString(_frag)
			}
		}

		query := strings.TrimSpace(builder.String())
		return query, args, nil
	}
	query, args, err := buildQueryAndArgs()
	if err != nil {
		return nil, err
	}
	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		return nil, fmt.Errorf("InsertUserTags: failed to prepare statement: %w", err)
	}
	defer stmt.Close()
	// Execute query (no result expected)
	execResult, err := stmt.ExecContext(ctx, args...)
	if err != nil {
		return nil, fmt.Errorf("InsertUserTags: failed to execute statement: %w", err)
	}
	result = execResult

	return result, nil
}
