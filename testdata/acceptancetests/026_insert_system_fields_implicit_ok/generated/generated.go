//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package generated

import (
	"context"
	"fmt"
	"database/sql"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// InsertUser specific CEL programs and mock path
var (
	insertuserPrograms []cel.Program
)

const insertuserMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0: Base environment
	{
		// Build CEL env options then expand variadic at call-site to avoid type inference issues
		opts := []cel.EnvOption{
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
			cel.Variable("user", cel.types.NewObjectType("User")),
		}
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create InsertUser CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}

	// Create programs for each expression using the corresponding environment
	insertuserPrograms = make([]cel.Program, 2)
	// expr_001: "user.id" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("user.id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression 'user.id': %v", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for 'user.id': %v", err))
		}
		insertuserPrograms[0] = program
	}
	// expr_002: "user.name" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("user.name")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression 'user.name': %v", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for 'user.name': %v", err))
		}
		insertuserPrograms[1] = program
	}
}
// InsertUser - sql.Result Affinity
func InsertUser(ctx context.Context, executor snapsqlgo.DBExecutor, user User, opts ...snapsqlgo.FuncOpt) (sql.Result, error) {
	var result sql.Result

	// Hierarchical metas (for nested aggregation code generation - placeholder)
	// Count: 0

	// Extract function configuration
	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "insertuser", "sql.result")

	// Check for mock mode
	if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
		mockData, err := snapsqlgo.GetMockDataFromFiles(insertuserMockPath, funcConfig.MockDataNames)
		if err != nil {
			return result, fmt.Errorf("failed to get mock data: %w", err)
		}

		result, err = snapsqlgo.MapMockDataToStruct[sql.Result](mockData)
		if err != nil {
			return result, fmt.Errorf("failed to map mock data to sql.Result struct: %w", err)
		}

		return result, nil
	}
	// Extract implicit parameters
	implicitSpecs := []snapsqlgo.ImplicitParamSpec{
		{Name: "created_at", Type: "time.Time", Required: false, DefaultValue: "CURRENT_TIMESTAMP"},
		{Name: "updated_at", Type: "time.Time", Required: false, DefaultValue: "CURRENT_TIMESTAMP"},
	}
	systemValues := snapsqlgo.ExtractImplicitParams(ctx, implicitSpecs)
	_ = systemValues // avoid unused if not referenced in args

	// Build SQL
	query := "INSERT INTO users (id, name, created_at, updated_at) VALUES ($1,$2, $3, $4)"
	args := []any{
		user.id,
		user.name,
		systemValues["created_at"],
		systemValues["updated_at"],
	}

	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		return result, fmt.Errorf("failed to prepare statement: %w", err)
	}
	defer stmt.Close()
	// Execute query (no result expected)
	_, err = stmt.ExecContext(ctx, args...)
	if err != nil {
	    return result, fmt.Errorf("failed to execute statement: %w", err)
	}

	return result, nil
}
