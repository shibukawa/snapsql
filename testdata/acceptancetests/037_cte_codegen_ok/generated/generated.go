//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package generated

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// PostponeCards specific CEL programs and mock path
var (
	postponeCardsPrograms []cel.Program
)

const postponeCardsMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0 (container: root)
	{
		// Build CEL env options
		opts := []cel.EnvOption{
			cel.Container("root"),
		}
		opts = append(opts,
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
		)
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create PostponeCards CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}

	// Create programs for each expression using the corresponding environment
	postponeCardsPrograms = make([]cel.Program, 0)
}

// PostponeCards - sql.Result Affinity
func PostponeCards(ctx context.Context, executor snapsqlgo.DBExecutor, opts ...snapsqlgo.FuncOpt) (sql.Result, error) {
	var result sql.Result

	// Hierarchical metas (for nested aggregation code generation - placeholder)
	// Count: 0

	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "postponeCards", "sql.result")
	// Check for mock mode
	if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
		mockData, err := snapsqlgo.GetMockDataFromFiles(postponeCardsMockPath, funcConfig.MockDataNames)
		if err != nil {
			return nil, fmt.Errorf("PostponeCards: failed to get mock data: %w", err)
		}

		result, err = snapsqlgo.MapMockDataToStruct[sql.Result](mockData)
		if err != nil {
			return nil, fmt.Errorf("PostponeCards: failed to map mock data to sql.Result struct: %w", err)
		}

		return result, nil
	}

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		query := "WITH pending AS (SELECT id FROM cards  WHERE status = 'pending') SELECT id FROM pending"
		args := make([]any, 0)
		return query, args, nil
	}
	query, args, err := buildQueryAndArgs()
	if err != nil {
		return nil, err
	}
	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		return nil, fmt.Errorf("PostponeCards: failed to prepare statement: %w", err)
	}
	defer stmt.Close()
	// Execute query and scan multiple rows (many affinity)
	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, fmt.Errorf("PostponeCards: failed to execute query: %w", err)
	}
	defer rows.Close()

	// Generic scan for any result - not implemented
	// This would require runtime reflection or predefined column mapping

	return result, nil
}
