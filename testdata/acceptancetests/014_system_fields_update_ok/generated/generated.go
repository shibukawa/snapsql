//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package generated

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// UpdateUser specific CEL programs and mock path
var (
	updateUserPrograms []cel.Program
)

const updateUserMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0: Base environment
	{
		// Build CEL env options then expand variadic at call-site to avoid type inference issues
		opts := []cel.EnvOption{
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
			cel.Variable("name", cel.StringType),
			cel.Variable("email", cel.StringType),
			cel.Variable("lock_no", cel.IntType),
		}
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create UpdateUser CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}

	// Create programs for each expression using the corresponding environment
	updateUserPrograms = make([]cel.Program, 3)
	// expr_001: "name" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("name")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "name", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "name", err))
		}
		updateUserPrograms[0] = program
	}
	// expr_002: "email" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("email")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "email", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "email", err))
		}
		updateUserPrograms[1] = program
	}
	// expr_003: "lock_no" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("lock_no")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "lock_no", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "lock_no", err))
		}
		updateUserPrograms[2] = program
	}
}

// UpdateUser - sql.Result Affinity
func UpdateUser(ctx context.Context, executor snapsqlgo.DBExecutor, name string, email string, lockNo int, opts ...snapsqlgo.FuncOpt) (sql.Result, error) {
	var result sql.Result

	// Hierarchical metas (for nested aggregation code generation - placeholder)
	// Count: 0

	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "updateUser", "sql.result")
	// Check for mock mode
	if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
		mockData, err := snapsqlgo.GetMockDataFromFiles(updateUserMockPath, funcConfig.MockDataNames)
		if err != nil {
			return nil, fmt.Errorf("UpdateUser: failed to get mock data: %w", err)
		}

		result, err = snapsqlgo.MapMockDataToStruct[sql.Result](mockData)
		if err != nil {
			return nil, fmt.Errorf("UpdateUser: failed to map mock data to sql.Result struct: %w", err)
		}

		return result, nil
	}
	// Extract implicit parameters
	implicitSpecs := []snapsqlgo.ImplicitParamSpec{
		{Name: "updated_at", Type: "time.Time", Required: false, DefaultValue: "CURRENT_TIMESTAMP"},
		{Name: "updated_by", Type: "string", Required: true},
	}
	systemValues := snapsqlgo.ExtractImplicitParams(ctx, implicitSpecs)
	_ = systemValues // avoid unused if not referenced in args

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		query := "UPDATE users SET name =$1, email =$2, lock_no =$3, updated_at = $4, updated_by = $5  WHERE id = 1"
		args := make([]any, 0)
		paramMap := map[string]any{
			"name":    name,
			"email":   email,
			"lock_no": lockNo,
		}

		evalRes0, _, err := updateUserPrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("UpdateUser: failed to evaluate expression: %w", err)
		}
		args = append(args, evalRes0.Value())

		evalRes1, _, err := updateUserPrograms[1].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("UpdateUser: failed to evaluate expression: %w", err)
		}
		args = append(args, evalRes1.Value())

		evalRes2, _, err := updateUserPrograms[2].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("UpdateUser: failed to evaluate expression: %w", err)
		}
		args = append(args, evalRes2.Value())
		args = append(args, systemValues["updated_at"])

		args = append(args, systemValues["updated_by"])

		return query, args, nil
	}
	query, args, err := buildQueryAndArgs()
	if err != nil {
		return nil, err
	}
	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		return nil, fmt.Errorf("UpdateUser: failed to prepare statement: %w", err)
	}
	defer stmt.Close()
	// Execute query (no result expected)
	execResult, err := stmt.ExecContext(ctx, args...)
	if err != nil {
		return nil, fmt.Errorf("UpdateUser: failed to execute statement: %w", err)
	}
	result = execResult

	return result, nil
}
