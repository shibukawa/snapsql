//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package generated

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// ListUserNotifications specific CEL programs and mock path
var (
	listUserNotificationsPrograms []cel.Program
)

const listUserNotificationsMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0: Base environment
	{
		// Build CEL env options then expand variadic at call-site to avoid type inference issues
		opts := []cel.EnvOption{
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
			cel.Variable("user_id", cel.StringType),
			cel.Variable("unread_only", cel.BoolType),
			cel.Variable("since", cel.StringType),
		}
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create ListUserNotifications CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}

	// Create programs for each expression using the corresponding environment
	listUserNotificationsPrograms = make([]cel.Program, 4)
	// expr_001: "user_id" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("user_id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "user_id", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "user_id", err))
		}
		listUserNotificationsPrograms[0] = program
	}
	// expr_002: "unread_only" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("unread_only")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "unread_only", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "unread_only", err))
		}
		listUserNotificationsPrograms[1] = program
	}
	// expr_003: "since" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("since")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "since", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "since", err))
		}
		listUserNotificationsPrograms[2] = program
	}
	// expr_004: "since" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("since")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "since", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "since", err))
		}
		listUserNotificationsPrograms[3] = program
	}
}

// ListUserNotifications - sql.Result Affinity
func ListUserNotifications(ctx context.Context, executor snapsqlgo.DBExecutor, userID string, unreadOnly bool, since string, opts ...snapsqlgo.FuncOpt) (sql.Result, error) {
	var result sql.Result

	// Hierarchical metas (for nested aggregation code generation - placeholder)
	// Count: 0

	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "listUserNotifications", "sql.result")
	// Check for mock mode
	if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
		mockData, err := snapsqlgo.GetMockDataFromFiles(listUserNotificationsMockPath, funcConfig.MockDataNames)
		if err != nil {
			return nil, fmt.Errorf("ListUserNotifications: failed to get mock data: %w", err)
		}

		result, err = snapsqlgo.MapMockDataToStruct[sql.Result](mockData)
		if err != nil {
			return nil, fmt.Errorf("ListUserNotifications: failed to map mock data to sql.Result struct: %w", err)
		}

		return result, nil
	}

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		var builder strings.Builder
		args := make([]any, 0)
		var boundaryNeeded bool
		paramMap := map[string]any{
			"user_id":     userID,
			"unread_only": unreadOnly,
			"since":       since,
		}
		{ // safe append static with spacing
			_frag := "SELECT n.id, n.title FROM inbox i  WHERE i.user_id =?"
			if builder.Len() > 0 {
				_b := builder.String()
				_last := _b[len(_b)-1]
				// determine if last char is word char
				_endsWord := (_last >= 'A' && _last <= 'Z') || (_last >= 'a' && _last <= 'z') || (_last >= '0' && _last <= '9') || _last == '_' || _last == ')'
				// skip leading spaces in _frag
				_k := 0
				for _k < len(_frag) && (_frag[_k] == ' ' || _frag[_k] == '\n' || _frag[_k] == '\t') {
					_k++
				}
				_startsWord := false
				if _k < len(_frag) {
					_c := _frag[_k]
					_startsWord = (_c >= 'A' && _c <= 'Z') || (_c >= 'a' && _c <= 'z') || _c == '_' || _c == '(' || _c == '$'
				}
				if _endsWord && _startsWord {
					builder.WriteByte(' ')
				}
			}
			builder.WriteString(_frag)
		}
		boundaryNeeded = true
		// Evaluate expression 0
		evalRes0, _, err := listUserNotificationsPrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("ListUserNotifications: failed to evaluate expression: %w", err)
		}
		args = append(args, evalRes0.Value())
		// IF condition: expression 1
		condResult, _, err := listUserNotificationsPrograms[1].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("ListUserNotifications: failed to evaluate condition: %w", err)
		}
		if condResult.Value().(bool) {
			if boundaryNeeded {
				builder.WriteString(" AND ")
			}
			boundaryNeeded = true
			{ // safe append static with spacing
				_frag := "i.read_at IS NULL"
				if builder.Len() > 0 {
					_b := builder.String()
					_last := _b[len(_b)-1]
					// determine if last char is word char
					_endsWord := (_last >= 'A' && _last <= 'Z') || (_last >= 'a' && _last <= 'z') || (_last >= '0' && _last <= '9') || _last == '_' || _last == ')'
					// skip leading spaces in _frag
					_k := 0
					for _k < len(_frag) && (_frag[_k] == ' ' || _frag[_k] == '\n' || _frag[_k] == '\t') {
						_k++
					}
					_startsWord := false
					if _k < len(_frag) {
						_c := _frag[_k]
						_startsWord = (_c >= 'A' && _c <= 'Z') || (_c >= 'a' && _c <= 'z') || _c == '_' || _c == '(' || _c == '$'
					}
					if _endsWord && _startsWord {
						builder.WriteByte(' ')
					}
				}
				builder.WriteString(_frag)
			}
			boundaryNeeded = true
		}
		// IF condition: expression 2
		condResult, _, err = listUserNotificationsPrograms[2].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("ListUserNotifications: failed to evaluate condition: %w", err)
		}
		if condResult.Value().(bool) {
			if boundaryNeeded {
				builder.WriteString(" AND ")
			}
			boundaryNeeded = true
			{ // safe append static with spacing
				_frag := "i.created_at >?"
				if builder.Len() > 0 {
					_b := builder.String()
					_last := _b[len(_b)-1]
					// determine if last char is word char
					_endsWord := (_last >= 'A' && _last <= 'Z') || (_last >= 'a' && _last <= 'z') || (_last >= '0' && _last <= '9') || _last == '_' || _last == ')'
					// skip leading spaces in _frag
					_k := 0
					for _k < len(_frag) && (_frag[_k] == ' ' || _frag[_k] == '\n' || _frag[_k] == '\t') {
						_k++
					}
					_startsWord := false
					if _k < len(_frag) {
						_c := _frag[_k]
						_startsWord = (_c >= 'A' && _c <= 'Z') || (_c >= 'a' && _c <= 'z') || _c == '_' || _c == '(' || _c == '$'
					}
					if _endsWord && _startsWord {
						builder.WriteByte(' ')
					}
				}
				builder.WriteString(_frag)
			}
			boundaryNeeded = true
			// Evaluate expression 2
			evalRes1, _, err := listUserNotificationsPrograms[2].Eval(paramMap)
			if err != nil {
				return "", nil, fmt.Errorf("ListUserNotifications: failed to evaluate expression: %w", err)
			}
			args = append(args, evalRes1.Value())
		}
		{ // safe append static with spacing
			_frag := "AND i.deleted_at IS NULL"
			if builder.Len() > 0 {
				_b := builder.String()
				_last := _b[len(_b)-1]
				// determine if last char is word char
				_endsWord := (_last >= 'A' && _last <= 'Z') || (_last >= 'a' && _last <= 'z') || (_last >= '0' && _last <= '9') || _last == '_' || _last == ')'
				// skip leading spaces in _frag
				_k := 0
				for _k < len(_frag) && (_frag[_k] == ' ' || _frag[_k] == '\n' || _frag[_k] == '\t') {
					_k++
				}
				_startsWord := false
				if _k < len(_frag) {
					_c := _frag[_k]
					_startsWord = (_c >= 'A' && _c <= 'Z') || (_c >= 'a' && _c <= 'z') || _c == '_' || _c == '(' || _c == '$'
				}
				if _endsWord && _startsWord {
					builder.WriteByte(' ')
				}
			}
			builder.WriteString(_frag)
		}
		boundaryNeeded = true

		query := strings.TrimSpace(builder.String())
		return query, args, nil
	}
	query, args, err := buildQueryAndArgs()
	if err != nil {
		return nil, err
	}
	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		return nil, fmt.Errorf("ListUserNotifications: failed to prepare statement: %w", err)
	}
	defer stmt.Close()
	// Execute query and scan multiple rows (many affinity)
	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, fmt.Errorf("ListUserNotifications: failed to execute query: %w", err)
	}
	defer rows.Close()

	// Generic scan for any result - not implemented
	// This would require runtime reflection or predefined column mapping

	return result, nil
}
