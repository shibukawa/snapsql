//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

package generated

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// getUser specific CEL programs and mock path
var (
	getuserPrograms []cel.Program
)

const getuserMockPath = ""

func init() {
	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 0)

	// Create programs for each expression using the corresponding environment
	getuserPrograms = make([]cel.Program, 0)
}

// getUser -  Affinity
func getUser(ctx context.Context, executor snapsqlgo.DBExecutor, opts ...snapsqlgo.FuncOpt) (, error) {
	var result 

	// Extract function configuration
	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "getuser", "")

	// Check for mock mode
	if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
		mockData, err := snapsqlgo.GetMockDataFromFiles(getuserMockPath, funcConfig.MockDataNames)
		if err != nil {
			return result, fmt.Errorf("failed to get mock data: %w", err)
		}

		result, err = snapsqlgo.MapMockDataToStruct[](mockData)
		if err != nil {
			return result, fmt.Errorf("failed to map mock data to  struct: %w", err)
		}

		return result, nil
	}

	// Build SQL
	var builder strings.Builder
	args := make([]any, 0)

	// TODO: Generate SQL building code

	// Execute query
	stmt, err := executor.PrepareContext(ctx, builder.String())
	if err != nil {
		return result, fmt.Errorf("failed to prepare statement: %w", err)
	}
	defer stmt.Close()

	// TODO: Generate query execution code based on response type

	return result, nil
}