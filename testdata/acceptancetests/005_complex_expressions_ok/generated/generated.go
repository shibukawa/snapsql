//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package generated

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// GetComplexData specific CEL programs and mock path
var (
	getComplexDataPrograms []cel.Program
)

const getComplexDataMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0: Base environment
	{
		// Build CEL env options then expand variadic at call-site to avoid type inference issues
		opts := []cel.EnvOption{
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
			cel.Variable("user_id", cel.IntType),
			cel.Variable("username", cel.StringType),
			cel.Variable("display_name", cel.BoolType),
			cel.Variable("start_date", cel.StringType),
			cel.Variable("end_date", cel.StringType),
			cel.Variable("sort_field", cel.StringType),
			cel.Variable("sort_direction", cel.StringType),
			cel.Variable("page_size", cel.IntType),
			cel.Variable("page", cel.IntType),
		}
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create GetComplexData CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}

	// Create programs for each expression using the corresponding environment
	getComplexDataPrograms = make([]cel.Program, 7)
	// expr_001: "display_name ? username : "Anonymous"" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("display_name ? username : \"Anonymous\"")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "display_name ? username : \"Anonymous\"", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "display_name ? username : \"Anonymous\"", err))
		}
		getComplexDataPrograms[0] = program
	}
	// expr_002: "start_date != "" && end_date != """ using environment 0
	{
		ast, issues := celEnvironments[0].Compile("start_date != \"\" && end_date != \"\"")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "start_date != \"\" && end_date != \"\"", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "start_date != \"\" && end_date != \"\"", err))
		}
		getComplexDataPrograms[1] = program
	}
	// expr_003: "start_date" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("start_date")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "start_date", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "start_date", err))
		}
		getComplexDataPrograms[2] = program
	}
	// expr_004: "end_date" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("end_date")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "end_date", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "end_date", err))
		}
		getComplexDataPrograms[3] = program
	}
	// expr_005: "sort_field + " " + (sort_direction != "" ? sort_direction : "ASC")" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("sort_field + \" \" + (sort_direction != \"\" ? sort_direction : \"ASC\")")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "sort_field + \" \" + (sort_direction != \"\" ? sort_direction : \"ASC\")", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "sort_field + \" \" + (sort_direction != \"\" ? sort_direction : \"ASC\")", err))
		}
		getComplexDataPrograms[4] = program
	}
	// expr_006: "page_size != 0 ? page_size : 10" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("page_size != 0 ? page_size : 10")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "page_size != 0 ? page_size : 10", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "page_size != 0 ? page_size : 10", err))
		}
		getComplexDataPrograms[5] = program
	}
	// expr_007: "page > 0 ? (page - 1) * page_size : 0" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("page > 0 ? (page - 1) * page_size : 0")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "page > 0 ? (page - 1) * page_size : 0", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "page > 0 ? (page - 1) * page_size : 0", err))
		}
		getComplexDataPrograms[6] = program
	}
}

// GetComplexData - sql.Result Affinity
func GetComplexData(ctx context.Context, executor snapsqlgo.DBExecutor, userID int, username string, displayName bool, startDate string, endDate string, sortField string, sortDirection string, pageSize int, page int, opts ...snapsqlgo.FuncOpt) (sql.Result, error) {
	var result sql.Result

	// Hierarchical metas (for nested aggregation code generation - placeholder)
	// Count: 0

	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "getComplexData", "sql.result")
	// Check for mock mode
	if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
		mockData, err := snapsqlgo.GetMockDataFromFiles(getComplexDataMockPath, funcConfig.MockDataNames)
		if err != nil {
			return nil, fmt.Errorf("GetComplexData: failed to get mock data: %w", err)
		}

		result, err = snapsqlgo.MapMockDataToStruct[sql.Result](mockData)
		if err != nil {
			return nil, fmt.Errorf("GetComplexData: failed to map mock data to sql.Result struct: %w", err)
		}

		return result, nil
	}

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		var builder strings.Builder
		args := make([]any, 0)
		var boundaryNeeded bool
		paramMap := map[string]any{
			"user_id":        userID,
			"username":       username,
			"display_name":   displayName,
			"start_date":     startDate,
			"end_date":       endDate,
			"sort_field":     sortField,
			"sort_direction": sortDirection,
			"page_size":      pageSize,
			"page":           page,
		}
		{ // append static fragment
			_frag := "SELECT id, name,?"
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}
		boundaryNeeded = true
		// Evaluate expression 0
		evalRes0, _, err := getComplexDataPrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("GetComplexData: failed to evaluate expression: %w", err)
		}
		args = append(args, evalRes0.Value())
		{ // append static fragment
			_frag := "FROM users  WHERE"
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}
		boundaryNeeded = true
		// IF condition: expression 1
		condResult, _, err := getComplexDataPrograms[1].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("GetComplexData: failed to evaluate condition: %w", err)
		}
		if condResult.Value().(bool) {
			{ // append static fragment
				_frag := "created_at BETWEEN ?"
				if builder.Len() > 0 {
					builder.WriteByte(' ')
				}
				builder.WriteString(_frag)
			}
			boundaryNeeded = true
			// Evaluate expression 2
			evalRes1, _, err := getComplexDataPrograms[2].Eval(paramMap)
			if err != nil {
				return "", nil, fmt.Errorf("GetComplexData: failed to evaluate expression: %w", err)
			}
			args = append(args, evalRes1.Value())
			if boundaryNeeded {
				builder.WriteString(" AND ")
			}
			boundaryNeeded = true
			{ // append static fragment
				_frag := "?"
				if builder.Len() > 0 {
					builder.WriteByte(' ')
				}
				builder.WriteString(_frag)
			}
			boundaryNeeded = true
			// Evaluate expression 3
			evalRes2, _, err := getComplexDataPrograms[3].Eval(paramMap)
			if err != nil {
				return "", nil, fmt.Errorf("GetComplexData: failed to evaluate expression: %w", err)
			}
			args = append(args, evalRes2.Value())
		}
		{ // append static fragment
			_frag := "OR DER BY ?"
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}
		boundaryNeeded = true
		// Evaluate expression 4
		evalRes3, _, err := getComplexDataPrograms[4].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("GetComplexData: failed to evaluate expression: %w", err)
		}
		args = append(args, evalRes3.Value())
		boundaryNeeded = false
		{ // append static fragment
			_frag := " LIMIT ?"
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}
		boundaryNeeded = true
		// Evaluate expression 5
		evalRes4, _, err := getComplexDataPrograms[5].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("GetComplexData: failed to evaluate expression: %w", err)
		}
		args = append(args, evalRes4.Value())
		{ // append static fragment
			_frag := " OFFSET ?"
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}
		boundaryNeeded = true
		// Evaluate expression 6
		evalRes5, _, err := getComplexDataPrograms[6].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("GetComplexData: failed to evaluate expression: %w", err)
		}
		args = append(args, evalRes5.Value())

		query := strings.TrimSpace(builder.String())
		return query, args, nil
	}
	query, args, err := buildQueryAndArgs()
	if err != nil {
		return nil, err
	}
	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		return nil, fmt.Errorf("GetComplexData: failed to prepare statement: %w", err)
	}
	defer stmt.Close()
	// Execute query and scan multiple rows (many affinity)
	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, fmt.Errorf("GetComplexData: failed to execute query: %w", err)
	}
	defer rows.Close()

	// Generic scan for any result - not implemented
	// This would require runtime reflection or predefined column mapping

	return result, nil
}
