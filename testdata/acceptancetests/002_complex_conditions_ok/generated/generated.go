//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package generated

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)
// GetFilteredDataResult represents the response structure for GetFilteredData
type GetFilteredDataResult struct {
	Id int `json:"id"`
	Name string `json:"name"`
	Age int `json:"age"`
	Department string `json:"department"`
}

// GetFilteredData specific CEL programs and mock path
var (
	getfiltereddataPrograms []cel.Program
)

const getfiltereddataMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0: Base environment
	env0, err := cel.NewEnv(
		cel.HomogeneousAggregateLiterals(),
		cel.EagerlyValidateDeclarations(true),
		snapsqlgo.DecimalLibrary,
		cel.Variable("min_age", cel.IntType),
		cel.Variable("max_age", cel.IntType),
		cel.Variable("departments", cel.ListType(cel.StringType)),
		cel.Variable("active", cel.BoolType),
	)
	if err != nil {
		panic(fmt.Sprintf("failed to create GetFilteredData CEL environment 0: %v", err))
	}
	celEnvironments[0] = env0

	// Create programs for each expression using the corresponding environment
	getfiltereddataPrograms = make([]cel.Program, 7)
	// expr_001: "min_age > 0" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("min_age > 0")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression 'min_age > 0': %v", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for 'min_age > 0': %v", err))
		}
		getfiltereddataPrograms[0] = program
	}
	// expr_002: "min_age" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("min_age")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression 'min_age': %v", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for 'min_age': %v", err))
		}
		getfiltereddataPrograms[1] = program
	}
	// expr_003: "max_age > 0" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("max_age > 0")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression 'max_age > 0': %v", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for 'max_age > 0': %v", err))
		}
		getfiltereddataPrograms[2] = program
	}
	// expr_004: "max_age" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("max_age")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression 'max_age': %v", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for 'max_age': %v", err))
		}
		getfiltereddataPrograms[3] = program
	}
	// expr_005: "departments.size() > 0" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("departments.size() > 0")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression 'departments.size() > 0': %v", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for 'departments.size() > 0': %v", err))
		}
		getfiltereddataPrograms[4] = program
	}
	// expr_006: "departments" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("departments")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression 'departments': %v", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for 'departments': %v", err))
		}
		getfiltereddataPrograms[5] = program
	}
	// expr_007: "active" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("active")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression 'active': %v", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for 'active': %v", err))
		}
		getfiltereddataPrograms[6] = program
	}
}
// GetFilteredData - []GetFilteredDataResult Affinity
func GetFilteredData(ctx context.Context, executor snapsqlgo.DBExecutor, minAge int, maxAge int, departments []string, active bool, opts ...snapsqlgo.FuncOpt) ([]GetFilteredDataResult, error) {
	var result []GetFilteredDataResult

	// Extract function configuration
	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "getfiltereddata", "[]getfiltereddataresult")

	// Check for mock mode
	if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
		mockData, err := snapsqlgo.GetMockDataFromFiles(getfiltereddataMockPath, funcConfig.MockDataNames)
		if err != nil {
			return result, fmt.Errorf("failed to get mock data: %w", err)
		}

		result, err = snapsqlgo.MapMockDataToStruct[[]GetFilteredDataResult](mockData)
		if err != nil {
			return result, fmt.Errorf("failed to map mock data to []GetFilteredDataResult struct: %w", err)
		}

		return result, nil
	}

	// Build SQL
	var builder strings.Builder
	args := make([]any, 0)
	var boundaryNeeded bool
	paramMap := map[string]interface{}{
	    "min_age": minAge,
	    "max_age": maxAge,
	    "departments": departments,
	    "active": active,
	}
	builder.WriteString("SELECT id, name, age, department FROM users WHERE 1=1")
	boundaryNeeded = true
	// IF condition: expression 0
	condResult, err := getfiltereddataPrograms[0].Eval(paramMap)
	if err != nil {
	    return result, fmt.Errorf("failed to evaluate condition: %w", err)
	}
	if condResult.Value().(bool) {
	if boundaryNeeded {
	    builder.WriteString("AND")
	}
	boundaryNeeded = true
	builder.WriteString("age >=?")
	boundaryNeeded = true
	// Evaluate expression 1
	result, err := getfiltereddataPrograms[1].Eval(paramMap)
	if err != nil {
	    return result, fmt.Errorf("failed to evaluate expression: %w", err)
	}
	args = append(args, result.Value())
	}
	// IF condition: expression 2
	condResult, err := getfiltereddataPrograms[2].Eval(paramMap)
	if err != nil {
	    return result, fmt.Errorf("failed to evaluate condition: %w", err)
	}
	if condResult.Value().(bool) {
	if boundaryNeeded {
	    builder.WriteString("AND")
	}
	boundaryNeeded = true
	builder.WriteString("age <=?")
	boundaryNeeded = true
	// Evaluate expression 3
	result, err := getfiltereddataPrograms[3].Eval(paramMap)
	if err != nil {
	    return result, fmt.Errorf("failed to evaluate expression: %w", err)
	}
	args = append(args, result.Value())
	}
	// IF condition: expression 4
	condResult, err := getfiltereddataPrograms[4].Eval(paramMap)
	if err != nil {
	    return result, fmt.Errorf("failed to evaluate condition: %w", err)
	}
	if condResult.Value().(bool) {
	builder.WriteString("department IN (?")
	boundaryNeeded = true
	// Evaluate expression 5
	result, err := getfiltereddataPrograms[5].Eval(paramMap)
	if err != nil {
	    return result, fmt.Errorf("failed to evaluate expression: %w", err)
	}
	args = append(args, result.Value())
	builder.WriteString("('HR''Engineering'")
	boundaryNeeded = true
	boundaryNeeded = false
	builder.WriteString("))")
	boundaryNeeded = true
	}
	// IF condition: expression 6
	condResult, err := getfiltereddataPrograms[6].Eval(paramMap)
	if err != nil {
	    return result, fmt.Errorf("failed to evaluate condition: %w", err)
	}
	if condResult.Value().(bool) {
	if boundaryNeeded {
	    builder.WriteString("AND")
	}
	boundaryNeeded = true
	builder.WriteString("status = 'active'")
	boundaryNeeded = true
	}
	
	query := builder.String()

	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		return result, fmt.Errorf("failed to prepare statement: %w", err)
	}
	defer stmt.Close()
	// Execute query and scan multiple rows
	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
	    return result, fmt.Errorf("failed to execute query: %w", err)
	}
	defer rows.Close()
	
	for rows.Next() {
	    var item GetFilteredDataResult
	    err := rows.Scan(
	        &item.Id,
	        &item.Name,
	        &item.Age,
	        &item.Department
	    )
	    if err != nil {
	        return result, fmt.Errorf("failed to scan row: %w", err)
	    }
	    result = append(result, item)
	}
	
	if err = rows.Err(); err != nil {
	    return result, fmt.Errorf("error iterating rows: %w", err)
	}

	return result, nil
}
