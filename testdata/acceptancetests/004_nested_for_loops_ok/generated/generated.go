//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package generated

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/google/cel-go/cel"
	"github.com/google/cel-go/common/types"
	"github.com/google/cel-go/common/types/ref"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

type InsertAllSubDepartmentsSubDepartment struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}
type InsertAllSubDepartmentsDepartment struct {
	DepartmentName string                                 `json:"department_name"`
	DepartmentCode string                                 `json:"department_code"`
	SubDepartments []InsertAllSubDepartmentsSubDepartment `json:"sub_departments"`
}

// InsertAllSubDepartments specific CEL programs and mock path
var (
	insertAllSubDepartmentsPrograms []cel.Program
)

const insertAllSubDepartmentsMockPath = ""

func init() {
	// Static accessor functions for each type
	insertallsubdepartmentsdepartmentDepartmentCodeAccessor := func(value any) ref.Val {
		v := value.(*InsertAllSubDepartmentsDepartment)
		return snapsqlgo.ConvertGoValueToCEL(v.DepartmentCode)
	}
	insertallsubdepartmentsdepartmentDepartmentNameAccessor := func(value any) ref.Val {
		v := value.(*InsertAllSubDepartmentsDepartment)
		return snapsqlgo.ConvertGoValueToCEL(v.DepartmentName)
	}
	insertallsubdepartmentsdepartmentSubDepartmentsAccessor := func(value any) ref.Val {
		v := value.(*InsertAllSubDepartmentsDepartment)
		return snapsqlgo.ConvertGoValueToCEL(v.SubDepartments)
	}
	insertallsubdepartmentssubdepartmentIDAccessor := func(value any) ref.Val {
		v := value.(*InsertAllSubDepartmentsSubDepartment)
		return snapsqlgo.ConvertGoValueToCEL(v.ID)
	}
	insertallsubdepartmentssubdepartmentNameAccessor := func(value any) ref.Val {
		v := value.(*InsertAllSubDepartmentsSubDepartment)
		return snapsqlgo.ConvertGoValueToCEL(v.Name)
	}

	// Create type definitions for local type store
	typeDefinitions := map[string]map[string]snapsqlgo.FieldInfo{
		"InsertAllSubDepartmentsDepartment": {
			"department_code": snapsqlgo.CreateFieldInfo(
				"department_code",
				types.StringType,
				insertallsubdepartmentsdepartmentDepartmentCodeAccessor,
			),
			"department_name": snapsqlgo.CreateFieldInfo(
				"department_name",
				types.StringType,
				insertallsubdepartmentsdepartmentDepartmentNameAccessor,
			),
			"sub_departments": snapsqlgo.CreateFieldInfo(
				"sub_departments",
				types.NewListType(types.NewObjectType("InsertAllSubDepartmentsSubDepartment")),
				insertallsubdepartmentsdepartmentSubDepartmentsAccessor,
			),
		},
		"InsertAllSubDepartmentsSubDepartment": {
			"id": snapsqlgo.CreateFieldInfo(
				"id",
				types.StringType,
				insertallsubdepartmentssubdepartmentIDAccessor,
			),
			"name": snapsqlgo.CreateFieldInfo(
				"name",
				types.StringType,
				insertallsubdepartmentssubdepartmentNameAccessor,
			),
		},
	}

	// Create and set up local type store
	registry := snapsqlgo.NewLocalTypeRegistry()
	for typeName, fields := range typeDefinitions {
		registry.RegisterStructWithFields(typeName, fields)
	}

	// Set global registry for nested type resolution
	snapsqlgo.SetGlobalRegistry(registry)

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 3)
	// Environment 0: Base environment
	{
		// Build CEL env options then expand variadic at call-site to avoid type inference issues
		opts := []cel.EnvOption{
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
			cel.Variable("departments", cel.AnyType),
		}
		opts = append(opts, snapsqlgo.CreateCELOptionsWithTypes(typeDefinitions)...)
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create InsertAllSubDepartments CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}
	// Environment 1: Base environment
	{
		// Build CEL env options then expand variadic at call-site to avoid type inference issues
		opts := []cel.EnvOption{
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
			cel.Variable("dept", cel.AnyType),
		}
		opts = append(opts, snapsqlgo.CreateCELOptionsWithTypes(typeDefinitions)...)
		env1, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create InsertAllSubDepartments CEL environment 1: %v", err))
		}
		celEnvironments[1] = env1
	}
	// Environment 2: Base environment
	{
		// Build CEL env options then expand variadic at call-site to avoid type inference issues
		opts := []cel.EnvOption{
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
			cel.Variable("sub", cel.AnyType),
		}
		opts = append(opts, snapsqlgo.CreateCELOptionsWithTypes(typeDefinitions)...)
		env2, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create InsertAllSubDepartments CEL environment 2: %v", err))
		}
		celEnvironments[2] = env2
	}

	// Create programs for each expression using the corresponding environment
	insertAllSubDepartmentsPrograms = make([]cel.Program, 6)
	// expr_001: "departments" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("departments")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "departments", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "departments", err))
		}
		insertAllSubDepartmentsPrograms[0] = program
	}
	// expr_002: "dept.sub_departments" using environment 1
	{
		ast, issues := celEnvironments[1].Compile("dept.sub_departments")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "dept.sub_departments", issues.Err()))
		}
		program, err := celEnvironments[1].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "dept.sub_departments", err))
		}
		insertAllSubDepartmentsPrograms[1] = program
	}
	// expr_003: "dept.department_code + "-" + sub.id" using environment 2
	{
		ast, issues := celEnvironments[2].Compile("dept.department_code + \"-\" + sub.id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "dept.department_code + \"-\" + sub.id", issues.Err()))
		}
		program, err := celEnvironments[2].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "dept.department_code + \"-\" + sub.id", err))
		}
		insertAllSubDepartmentsPrograms[2] = program
	}
	// expr_004: "sub.name" using environment 2
	{
		ast, issues := celEnvironments[2].Compile("sub.name")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "sub.name", issues.Err()))
		}
		program, err := celEnvironments[2].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "sub.name", err))
		}
		insertAllSubDepartmentsPrograms[3] = program
	}
	// expr_005: "dept.department_code" using environment 2
	{
		ast, issues := celEnvironments[2].Compile("dept.department_code")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "dept.department_code", issues.Err()))
		}
		program, err := celEnvironments[2].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "dept.department_code", err))
		}
		insertAllSubDepartmentsPrograms[4] = program
	}
	// expr_006: "dept.department_name" using environment 2
	{
		ast, issues := celEnvironments[2].Compile("dept.department_name")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "dept.department_name", issues.Err()))
		}
		program, err := celEnvironments[2].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "dept.department_name", err))
		}
		insertAllSubDepartmentsPrograms[5] = program
	}
}

// InsertAllSubDepartments - sql.Result Affinity
func InsertAllSubDepartments(ctx context.Context, executor snapsqlgo.DBExecutor, departments []InsertAllSubDepartmentsDepartment, dept any, sub any, opts ...snapsqlgo.FuncOpt) (sql.Result, error) {
	var result sql.Result

	// Hierarchical metas (for nested aggregation code generation - placeholder)
	// Count: 0

	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "insertAllSubDepartments", "sql.result")
	// Check for mock mode
	if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
		mockData, err := snapsqlgo.GetMockDataFromFiles(insertAllSubDepartmentsMockPath, funcConfig.MockDataNames)
		if err != nil {
			return nil, fmt.Errorf("InsertAllSubDepartments: failed to get mock data: %w", err)
		}

		result, err = snapsqlgo.MapMockDataToStruct[sql.Result](mockData)
		if err != nil {
			return nil, fmt.Errorf("InsertAllSubDepartments: failed to map mock data to sql.Result struct: %w", err)
		}

		return result, nil
	}

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		var builder strings.Builder
		args := make([]any, 0)
		paramMap := map[string]any{
			"departments": departments,
		}
		{ // append static fragment
			_frag := "INSERT INTO sub_departments (id, name, department_code, department_name) VALUES"
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}
		// FOR loop: evaluate collection expression 0
		collectionResult0, _, err := insertAllSubDepartmentsPrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("InsertAllSubDepartments: failed to evaluate collection: %w", err)
		}
		collection0 := collectionResult0.Value().([]any)
		for _, deptLoopVar := range collection0 {
			paramMap["dept"] = deptLoopVar
			// FOR loop: evaluate collection expression 1
			collectionResult1, _, err := insertAllSubDepartmentsPrograms[1].Eval(paramMap)
			if err != nil {
				return "", nil, fmt.Errorf("InsertAllSubDepartments: failed to evaluate collection: %w", err)
			}
			collection1 := collectionResult1.Value().([]any)
			for _, subLoopVar := range collection1 {
				paramMap["sub"] = subLoopVar
				{ // append static fragment
					_frag := "(?"
					if builder.Len() > 0 {
						builder.WriteByte(' ')
					}
					builder.WriteString(_frag)
				}
				// Evaluate expression 2
				evalRes0, _, err := insertAllSubDepartmentsPrograms[2].Eval(paramMap)
				if err != nil {
					return "", nil, fmt.Errorf("InsertAllSubDepartments: failed to evaluate expression: %w", err)
				}
				args = append(args, evalRes0.Value())
				{ // append static fragment
					_frag := ",?"
					if builder.Len() > 0 {
						builder.WriteByte(' ')
					}
					builder.WriteString(_frag)
				}
				// Evaluate expression 3
				evalRes1, _, err := insertAllSubDepartmentsPrograms[3].Eval(paramMap)
				if err != nil {
					return "", nil, fmt.Errorf("InsertAllSubDepartments: failed to evaluate expression: %w", err)
				}
				args = append(args, evalRes1.Value())
				{ // append static fragment
					_frag := ",?"
					if builder.Len() > 0 {
						builder.WriteByte(' ')
					}
					builder.WriteString(_frag)
				}
				// Evaluate expression 4
				evalRes2, _, err := insertAllSubDepartmentsPrograms[4].Eval(paramMap)
				if err != nil {
					return "", nil, fmt.Errorf("InsertAllSubDepartments: failed to evaluate expression: %w", err)
				}
				args = append(args, evalRes2.Value())
				{ // append static fragment
					_frag := ",?"
					if builder.Len() > 0 {
						builder.WriteByte(' ')
					}
					builder.WriteString(_frag)
				}
				// Evaluate expression 5
				evalRes3, _, err := insertAllSubDepartmentsPrograms[5].Eval(paramMap)
				if err != nil {
					return "", nil, fmt.Errorf("InsertAllSubDepartments: failed to evaluate expression: %w", err)
				}
				args = append(args, evalRes3.Value())
				{ // append static fragment
					_frag := ")"
					if builder.Len() > 0 {
						builder.WriteByte(' ')
					}
					builder.WriteString(_frag)
				}
			}
		}

		query := strings.TrimSpace(builder.String())
		return query, args, nil
	}
	query, args, err := buildQueryAndArgs()
	if err != nil {
		return nil, err
	}
	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		return nil, fmt.Errorf("InsertAllSubDepartments: failed to prepare statement: %w", err)
	}
	defer stmt.Close()
	// Execute query (no result expected)
	execResult, err := stmt.ExecContext(ctx, args...)
	if err != nil {
		return nil, fmt.Errorf("InsertAllSubDepartments: failed to execute statement: %w", err)
	}
	result = execResult

	return result, nil
}
