//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package generated

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)
type InsertAllSubDepartmentsSubDepartment struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}
type InsertAllSubDepartmentsDepartment struct {
	DepartmentName string                                      `json:"department_name"`
	DepartmentCode string                                      `json:"department_code"`
	SubDepartments []InsertAllSubDepartmentsSubDepartment     `json:"sub_departments"`
}
// InsertAllSubDepartmentsResult represents the response structure for InsertAllSubDepartments
type InsertAllSubDepartmentsResult struct {
	Affectedrows int `json:"affected_rows"`
}

// InsertAllSubDepartments specific CEL programs and mock path
var (
	insertallsubdepartmentsPrograms []cel.Program
)

const insertallsubdepartmentsMockPath = ""

func init() {
	// Static accessor functions for each type
	insertallsubdepartmentsdepartmentDepartmentCodeAccessor := func(value interface{}) ref.Val {
		v := value.(*InsertAllSubDepartmentsDepartment)
		return snapsqlgo.ConvertGoValueToCEL(v.DepartmentCode)
	}
	insertallsubdepartmentsdepartmentDepartmentNameAccessor := func(value interface{}) ref.Val {
		v := value.(*InsertAllSubDepartmentsDepartment)
		return snapsqlgo.ConvertGoValueToCEL(v.DepartmentName)
	}
	insertallsubdepartmentsdepartmentSubDepartmentsAccessor := func(value interface{}) ref.Val {
		v := value.(*InsertAllSubDepartmentsDepartment)
		return snapsqlgo.ConvertGoValueToCEL(v.SubDepartments)
	}
	insertallsubdepartmentssubdepartmentIDAccessor := func(value interface{}) ref.Val {
		v := value.(*InsertAllSubDepartmentsSubDepartment)
		return snapsqlgo.ConvertGoValueToCEL(v.ID)
	}
	insertallsubdepartmentssubdepartmentNameAccessor := func(value interface{}) ref.Val {
		v := value.(*InsertAllSubDepartmentsSubDepartment)
		return snapsqlgo.ConvertGoValueToCEL(v.Name)
	}

	// Create type definitions for local type store
	typeDefinitions := map[string]map[string]snapsqlgo.FieldInfo{
		"InsertAllSubDepartmentsDepartment": {
			"department_code": snapsqlgo.CreateFieldInfo(
				"department_code", 
				types.StringType, 
				insertallsubdepartmentsdepartmentDepartmentCodeAccessor,
			),
			"department_name": snapsqlgo.CreateFieldInfo(
				"department_name", 
				types.StringType, 
				insertallsubdepartmentsdepartmentDepartmentNameAccessor,
			),
			"sub_departments": snapsqlgo.CreateFieldInfo(
				"sub_departments", 
				types.NewListType(types.NewObjectType("InsertAllSubDepartmentsSubDepartment")), 
				insertallsubdepartmentsdepartmentSubDepartmentsAccessor,
			),
		},
		"InsertAllSubDepartmentsSubDepartment": {
			"id": snapsqlgo.CreateFieldInfo(
				"id", 
				types.StringType, 
				insertallsubdepartmentssubdepartmentIDAccessor,
			),
			"name": snapsqlgo.CreateFieldInfo(
				"name", 
				types.StringType, 
				insertallsubdepartmentssubdepartmentNameAccessor,
			),
		},
	}

	// Create and set up local type store
	registry := snapsqlgo.NewLocalTypeRegistry()
	for typeName, fields := range typeDefinitions {
		structInfo := &snapsqlgo.StructInfo{
			Name:    typeName,
			CelType: types.NewObjectType(typeName),
			Fields:  fields,
		}
		registry.RegisterStruct(typeName, structInfo)
	}
	
	// Set global registry for nested type resolution
	snapsqlgo.SetGlobalRegistry(registry)

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 3)
	// Environment 0: Base environment
	env0, err := cel.NewEnv(
		cel.HomogeneousAggregateLiterals(),
		cel.EagerlyValidateDeclarations(true),
		snapsqlgo.DecimalLibrary,
		snapsqlgo.CreateCELOptionsWithTypes(typeDefinitions)...,
		cel.Variable("departments", cel.AnyType),
	)
	if err != nil {
		panic(fmt.Sprintf("failed to create InsertAllSubDepartments CEL environment 0: %v", err))
	}
	celEnvironments[0] = env0
	// Environment 1: Base environment
	env1, err := cel.NewEnv(
		cel.HomogeneousAggregateLiterals(),
		cel.EagerlyValidateDeclarations(true),
		snapsqlgo.DecimalLibrary,
		snapsqlgo.CreateCELOptionsWithTypes(typeDefinitions)...,
		cel.Variable("dept", cel.AnyType),
	)
	if err != nil {
		panic(fmt.Sprintf("failed to create InsertAllSubDepartments CEL environment 1: %v", err))
	}
	celEnvironments[1] = env1
	// Environment 2: Base environment
	env2, err := cel.NewEnv(
		cel.HomogeneousAggregateLiterals(),
		cel.EagerlyValidateDeclarations(true),
		snapsqlgo.DecimalLibrary,
		snapsqlgo.CreateCELOptionsWithTypes(typeDefinitions)...,
		cel.Variable("sub", cel.AnyType),
	)
	if err != nil {
		panic(fmt.Sprintf("failed to create InsertAllSubDepartments CEL environment 2: %v", err))
	}
	celEnvironments[2] = env2

	// Create programs for each expression using the corresponding environment
	insertallsubdepartmentsPrograms = make([]cel.Program, 6)
	// expr_001: "departments" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("departments")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression 'departments': %v", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for 'departments': %v", err))
		}
		insertallsubdepartmentsPrograms[0] = program
	}
	// expr_002: "dept.sub_departments" using environment 1
	{
		ast, issues := celEnvironments[1].Compile("dept.sub_departments")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression 'dept.sub_departments': %v", issues.Err()))
		}
		program, err := celEnvironments[1].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for 'dept.sub_departments': %v", err))
		}
		insertallsubdepartmentsPrograms[1] = program
	}
	// expr_003: "dept.department_code + "-" + sub.id" using environment 2
	{
		ast, issues := celEnvironments[2].Compile("dept.department_code + "-" + sub.id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression 'dept.department_code + "-" + sub.id': %v", issues.Err()))
		}
		program, err := celEnvironments[2].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for 'dept.department_code + "-" + sub.id': %v", err))
		}
		insertallsubdepartmentsPrograms[2] = program
	}
	// expr_004: "sub.name" using environment 2
	{
		ast, issues := celEnvironments[2].Compile("sub.name")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression 'sub.name': %v", issues.Err()))
		}
		program, err := celEnvironments[2].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for 'sub.name': %v", err))
		}
		insertallsubdepartmentsPrograms[3] = program
	}
	// expr_005: "dept.department_code" using environment 2
	{
		ast, issues := celEnvironments[2].Compile("dept.department_code")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression 'dept.department_code': %v", issues.Err()))
		}
		program, err := celEnvironments[2].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for 'dept.department_code': %v", err))
		}
		insertallsubdepartmentsPrograms[4] = program
	}
	// expr_006: "dept.department_name" using environment 2
	{
		ast, issues := celEnvironments[2].Compile("dept.department_name")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression 'dept.department_name': %v", issues.Err()))
		}
		program, err := celEnvironments[2].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for 'dept.department_name': %v", err))
		}
		insertallsubdepartmentsPrograms[5] = program
	}
}
// InsertAllSubDepartments - interface{} Affinity
func InsertAllSubDepartments(ctx context.Context, executor snapsqlgo.DBExecutor, departments []InsertAllSubDepartmentsDepartment, dept interface{}, sub interface{}, opts ...snapsqlgo.FuncOpt) (interface{}, error) {
	var result interface{}

	// Extract function configuration
	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "insertallsubdepartments", "interface{}")

	// Check for mock mode
	if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
		mockData, err := snapsqlgo.GetMockDataFromFiles(insertallsubdepartmentsMockPath, funcConfig.MockDataNames)
		if err != nil {
			return result, fmt.Errorf("failed to get mock data: %w", err)
		}

		result, err = snapsqlgo.MapMockDataToStruct[interface{}](mockData)
		if err != nil {
			return result, fmt.Errorf("failed to map mock data to interface{} struct: %w", err)
		}

		return result, nil
	}

	// Build SQL
	var builder strings.Builder
	args := make([]any, 0)
	var boundaryNeeded bool
	paramMap := map[string]interface{}{
	    "departments": departments,
	}
	builder.WriteString("INSERT INTO sub_departments (id, name, department_code, department_name) VALUES")
	boundaryNeeded = true
	// FOR loop: evaluate collection expression 0
	collectionResult0, err := insert_all_sub_departmentsPrograms[0].Eval(paramMap)
	if err != nil {
	    return result, fmt.Errorf("failed to evaluate collection: %w", err)
	}
	collection0 := collectionResult0.Value().([]interface{})
	for _, deptLoopVar := range collection0 {
	    paramMap["dept"] = deptLoopVar
	// FOR loop: evaluate collection expression 1
	collectionResult1, err := insert_all_sub_departmentsPrograms[1].Eval(paramMap)
	if err != nil {
	    return result, fmt.Errorf("failed to evaluate collection: %w", err)
	}
	collection1 := collectionResult1.Value().([]interface{})
	for _, subLoopVar := range collection1 {
	    paramMap["sub"] = subLoopVar
	builder.WriteString("(?")
	boundaryNeeded = true
	// Evaluate expression 2
	result, err := insert_all_sub_departmentsPrograms[2].Eval(paramMap)
	if err != nil {
	    return result, fmt.Errorf("failed to evaluate expression: %w", err)
	}
	args = append(args, result.Value())
	builder.WriteString(",?")
	boundaryNeeded = true
	// Evaluate expression 3
	result, err := insert_all_sub_departmentsPrograms[3].Eval(paramMap)
	if err != nil {
	    return result, fmt.Errorf("failed to evaluate expression: %w", err)
	}
	args = append(args, result.Value())
	builder.WriteString(",?")
	boundaryNeeded = true
	// Evaluate expression 4
	result, err := insert_all_sub_departmentsPrograms[4].Eval(paramMap)
	if err != nil {
	    return result, fmt.Errorf("failed to evaluate expression: %w", err)
	}
	args = append(args, result.Value())
	builder.WriteString(",?")
	boundaryNeeded = true
	// Evaluate expression 5
	result, err := insert_all_sub_departmentsPrograms[5].Eval(paramMap)
	if err != nil {
	    return result, fmt.Errorf("failed to evaluate expression: %w", err)
	}
	args = append(args, result.Value())
	builder.WriteString(")")
	boundaryNeeded = true
	}
	}
	
	query := builder.String()

	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		return result, fmt.Errorf("failed to prepare statement: %w", err)
	}
	defer stmt.Close()
	// Execute query (no result expected)
	_, err = stmt.ExecContext(ctx, args...)
	if err != nil {
	    return result, fmt.Errorf("failed to execute statement: %w", err)
	}

	return result, nil
}
