//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package generated

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// GetUsersWithConditions specific CEL programs and mock path
var (
	getUsersWithConditionsPrograms []cel.Program
)

const getUsersWithConditionsMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0 (container: root)
	{
		// Build CEL env options
		opts := []cel.EnvOption{
			cel.Container("root"),
		}
		opts = append(opts, cel.Variable("min_age", cel.IntType))
		opts = append(opts, cel.Variable("max_age", cel.IntType))
		opts = append(opts, cel.Variable("include_email", cel.BoolType))
		opts = append(opts,
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
		)
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create GetUsersWithConditions CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}

	// Create programs for each expression using the corresponding environment
	getUsersWithConditionsPrograms = make([]cel.Program, 3)
	// expr_001: "include_email" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("include_email")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "include_email", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "include_email", err))
		}
		getUsersWithConditionsPrograms[0] = program
	}
	// expr_002: "min_age" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("min_age")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "min_age", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "min_age", err))
		}
		getUsersWithConditionsPrograms[1] = program
	}
	// expr_003: "max_age" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("max_age")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "max_age", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "max_age", err))
		}
		getUsersWithConditionsPrograms[2] = program
	}
}

// GetUsersWithConditions - sql.Result Affinity
func GetUsersWithConditions(ctx context.Context, executor snapsqlgo.DBExecutor, minAge int, maxAge int, includeEmail bool, opts ...snapsqlgo.FuncOpt) (sql.Result, error) {
	var result sql.Result

	// Hierarchical metas (for nested aggregation code generation - placeholder)
	// Count: 0

	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "getUsersWithConditions", "sql.result")
	// Check for mock mode
	if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
		mockData, err := snapsqlgo.GetMockDataFromFiles(getUsersWithConditionsMockPath, funcConfig.MockDataNames)
		if err != nil {
			return nil, fmt.Errorf("GetUsersWithConditions: failed to get mock data: %w", err)
		}

		result, err = snapsqlgo.MapMockDataToStruct[sql.Result](mockData)
		if err != nil {
			return nil, fmt.Errorf("GetUsersWithConditions: failed to map mock data to sql.Result struct: %w", err)
		}

		return result, nil
	}

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		var builder strings.Builder
		args := make([]any, 0)
		var boundaryNeeded bool
		paramMap := map[string]any{
			"min_age":       minAge,
			"max_age":       maxAge,
			"include_email": includeEmail,
		}
		{ // append static fragment
			_frag := "SELECT id, name,"
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}
		boundaryNeeded = true
		// IF condition: expression 0
		condResult, _, err := getUsersWithConditionsPrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("GetUsersWithConditions: failed to evaluate condition: %w", err)
		}
		if snapsqlgo.Truthy(condResult) {
			{ // append static fragment
				_frag := "email"
				if builder.Len() > 0 {
					builder.WriteByte(' ')
				}
				builder.WriteString(_frag)
			}
			boundaryNeeded = true
			if boundaryNeeded {
				builder.WriteString(",")
			}
			boundaryNeeded = true
		} else {
			{ // append static fragment
				_frag := "'N/A' as email"
				if builder.Len() > 0 {
					builder.WriteByte(' ')
				}
				builder.WriteString(_frag)
			}
			boundaryNeeded = true
			if boundaryNeeded {
				builder.WriteString(",")
			}
			boundaryNeeded = true
		}
		{ // append static fragment
			_frag := "age"
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}
		boundaryNeeded = true
		boundaryNeeded = false
		{ // append static fragment
			_frag := "FROM users  WHERE age >=?"
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}
		boundaryNeeded = true
		// Evaluate expression 1
		evalRes0, _, err := getUsersWithConditionsPrograms[1].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("GetUsersWithConditions: failed to evaluate expression: %w", err)
		}
		args = append(args, evalRes0.Value())
		{ // append static fragment
			_frag := "AND age <=?"
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}
		boundaryNeeded = true
		// Evaluate expression 2
		evalRes1, _, err := getUsersWithConditionsPrograms[2].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("GetUsersWithConditions: failed to evaluate expression: %w", err)
		}
		args = append(args, evalRes1.Value())

		query := strings.TrimSpace(builder.String())
		return query, args, nil
	}
	query, args, err := buildQueryAndArgs()
	if err != nil {
		return nil, err
	}
	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		return nil, fmt.Errorf("GetUsersWithConditions: failed to prepare statement: %w", err)
	}
	defer stmt.Close()
	// Execute query and scan multiple rows (many affinity)
	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, fmt.Errorf("GetUsersWithConditions: failed to execute query: %w", err)
	}
	defer rows.Close()

	// Generic scan for any result - not implemented
	// This would require runtime reflection or predefined column mapping

	return result, nil
}
