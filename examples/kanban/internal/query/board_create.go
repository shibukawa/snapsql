//go:build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package query

import (
	"context"
	"fmt"
	"time"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// BoardCreateResult represents the response structure for BoardCreate
type BoardCreateResult struct {
	ID         int        `json:"id"`
	Name       string     `json:"name"`
	Status     string     `json:"status"`
	ArchivedAt *time.Time `json:"archived_at"`
	CreatedAt  time.Time  `json:"created_at"`
	UpdatedAt  time.Time  `json:"updated_at"`
}

// BoardCreate specific CEL programs and mock path
var (
	boardCreatePrograms []cel.Program
)

const boardCreateMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0 (container: root)
	{
		// Build CEL env options
		opts := []cel.EnvOption{
			cel.Container("root"),
		}
		opts = append(opts, cel.Variable("name", cel.StringType))
		opts = append(opts, cel.Variable("name", cel.StringType))
		opts = append(opts, cel.Variable("name", cel.StringType))
		opts = append(opts,
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
		)
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create BoardCreate CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}

	// Create programs for each expression using the corresponding environment
	boardCreatePrograms = make([]cel.Program, 1)
	// expr_001: "name" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("name")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "name", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "name", err))
		}
		boardCreatePrograms[0] = program
	}
}

// BoardCreate Creates a new board using the provided name and returns the persisted row including timestamps.
func BoardCreate(ctx context.Context, executor snapsqlgo.DBExecutor, name string, opts ...snapsqlgo.FuncOpt) (BoardCreateResult, error) {
	var result BoardCreateResult

	// Hierarchical metas (for nested aggregation code generation - placeholder)
	// Count: 0

	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "boardCreate", "boardcreateresult")
	// Check for mock mode
	if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
		mockData, err := snapsqlgo.GetMockDataFromFiles(boardCreateMockPath, funcConfig.MockDataNames)
		if err != nil {
			return result, fmt.Errorf("BoardCreate: failed to get mock data: %w", err)
		}

		result, err = snapsqlgo.MapMockDataToStruct[BoardCreateResult](mockData)
		if err != nil {
			return result, fmt.Errorf("BoardCreate: failed to map mock data to BoardCreateResult struct: %w", err)
		}

		return result, nil
	}
	// Extract implicit parameters
	implicitSpecs := []snapsqlgo.ImplicitParamSpec{
		{Name: "created_at", Type: "time.Time", Required: false},
		{Name: "updated_at", Type: "time.Time", Required: false},
	}
	systemValues := snapsqlgo.ExtractImplicitParams(ctx, implicitSpecs)
	_ = systemValues // avoid unused if not referenced in args

	execCtx := snapsqlgo.ExtractExecutionContext(ctx)
	rowLockMode := snapsqlgo.RowLockNone
	if execCtx != nil {
		rowLockMode = execCtx.RowLockMode()
	}
	if rowLockMode != snapsqlgo.RowLockNone {
		snapsqlgo.EnsureRowLockAllowed(snapsqlgo.QueryLogQueryTypeExec, rowLockMode)
	}
	rowLockClause := ""
	if rowLockMode != snapsqlgo.RowLockNone {
		var rowLockErr error
		rowLockClause, rowLockErr = snapsqlgo.BuildRowLockClause("sqlite", rowLockMode)
		if rowLockErr != nil {
			panic(rowLockErr)
		}
	}
	queryLogOptions := snapsqlgo.QueryOptionsSnapshot{
		RowLockClause: rowLockClause,
		RowLockMode:   rowLockMode,
	}
	logger := execCtx.QueryLogger()
	defer logger.Write(ctx, func() (snapsqlgo.QueryLogMetadata, snapsqlgo.DBExecutor) {
		return snapsqlgo.QueryLogMetadata{
			FuncName:   "BoardCreate",
			SourceFile: "query/BoardCreate",
			Dialect:    "sqlite",
			QueryType:  snapsqlgo.QueryLogQueryTypeExec,
			Options:    queryLogOptions,
		}, executor
	})

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		query := "INSERT INTO boards (name, status, created_at, updated_at) VALUES ($1, 'active', $2, $3)\n\n RETURNING id, name, status, archived_at, created_at, updated_at"
		args := make([]any, 0)
		paramMap := map[string]any{
			"name": name,
		}

		evalRes0, _, err := boardCreatePrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("BoardCreate: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes0))
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(systemValues["created_at"]))

		args = append(args, snapsqlgo.NormalizeNullableTimestamp(systemValues["updated_at"]))

		return query, args, nil
	}
	query, args, err := buildQueryAndArgs()
	if err != nil {
		logger.SetErr(err)
		return result, err
	}
	logger.SetQuery(query, args)
	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		err = fmt.Errorf("BoardCreate: failed to prepare statement: %w (query: %s)", err, query)
		logger.SetErr(err)
		return result, err
	}
	defer stmt.Close()
	// Execute query and scan single row
	row := stmt.QueryRowContext(ctx, args...)
	err = row.Scan(
		&result.ID,
		&result.Name,
		&result.Status,
		&result.ArchivedAt,
		&result.CreatedAt,
		&result.UpdatedAt,
	)
	if err != nil {
		err = fmt.Errorf("failed to scan row: %w", err)
		logger.SetErr(err)
		return result, err
	}

	return result, nil
}
