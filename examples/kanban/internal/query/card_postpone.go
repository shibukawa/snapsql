//go:build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package query

import (
	"context"
	"fmt"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// CardPostponeResult represents the response structure for CardPostpone
type CardPostponeResult struct {
	AffectedRows int `json:"affected_rows"`
}

// CardPostpone specific CEL programs and mock path
var (
	cardPostponePrograms []cel.Program
)

const cardPostponeMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0 (container: root)
	{
		// Build CEL env options
		opts := []cel.EnvOption{
			cel.Container("root"),
		}
		opts = append(opts, cel.Variable("src_board_id", cel.IntType))
		opts = append(opts, cel.Variable("dst_board_id", cel.IntType))
		opts = append(opts, cel.Variable("src_board_id", cel.IntType))
		opts = append(opts, cel.Variable("dst_board_id", cel.IntType))
		opts = append(opts,
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
		)
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create CardPostpone CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}

	// Create programs for each expression using the corresponding environment
	cardPostponePrograms = make([]cel.Program, 2)
	// expr_001: "src_board_id" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("src_board_id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "src_board_id", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "src_board_id", err))
		}
		cardPostponePrograms[0] = program
	}
	// expr_002: "dst_board_id" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("dst_board_id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "dst_board_id", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "dst_board_id", err))
		}
		cardPostponePrograms[1] = program
	}
}

// CardPostpone Moves all unfinished cards from a source board to the corresponding lists of a destination board created from templates. The destination list is chosen by matching stage_order; lists in the terminal stage (the maximum stage_order on the source board) retain their cards.
func CardPostpone(ctx context.Context, executor snapsqlgo.DBExecutor, srcBoardID int, dstBoardID int, opts ...snapsqlgo.FuncOpt) (any, error) {
	var result any

	// Hierarchical metas (for nested aggregation code generation - placeholder)
	// Count: 0

	execCtx := snapsqlgo.ExtractExecutionContext(ctx)
	rowLockMode := snapsqlgo.RowLockNone
	if execCtx != nil {
		rowLockMode = execCtx.RowLockMode()
	}
	if rowLockMode != snapsqlgo.RowLockNone {
		snapsqlgo.EnsureRowLockAllowed(snapsqlgo.QueryLogQueryTypeExec, rowLockMode)
	}
	rowLockClause := ""
	if rowLockMode != snapsqlgo.RowLockNone {
		var rowLockErr error
		rowLockClause, rowLockErr = snapsqlgo.BuildRowLockClause("sqlite", rowLockMode)
		if rowLockErr != nil {
			panic(rowLockErr)
		}
	}
	queryLogOptions := snapsqlgo.QueryOptionsSnapshot{
		RowLockClause: rowLockClause,
		RowLockMode:   rowLockMode,
	}
	logger := execCtx.QueryLogger()
	defer logger.Write(ctx, func() (snapsqlgo.QueryLogMetadata, snapsqlgo.DBExecutor) {
		return snapsqlgo.QueryLogMetadata{
			FuncName:   "CardPostpone",
			SourceFile: "query/CardPostpone",
			Dialect:    "sqlite",
			QueryType:  snapsqlgo.QueryLogQueryTypeExec,
			Options:    queryLogOptions,
		}, executor
	})

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		query := "WITH done_stage AS ( SELECT stage_order AS stage_limit FROM lists  WHERE board_id = $1  ORDER BY stage_order DESC, id DESC LIMIT 1 ), new_list AS ( SELECT id AS new_list_id FROM lists  WHERE board_id = $2  ORDER BY stage_order ASC, id ASC LIMIT 1 ), undone_lists AS ( SELECT old.id AS old_list_id FROM lists AS old  WHERE old.board_id = $3  AND old.stage_order < ( SELECT stage_limit FROM done_stage ) )UPDATE cards SET list_id = (SELECT new_list_id FROM new_list), updated_at = CURRENT_TIMESTAMP  WHERE list_id IN ( SELECT old_list_id FROM undone_lists )"
		args := make([]any, 0)
		paramMap := map[string]any{
			"src_board_id": srcBoardID,
			"dst_board_id": dstBoardID,
		}

		evalRes0, _, err := cardPostponePrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("CardPostpone: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes0))

		evalRes1, _, err := cardPostponePrograms[1].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("CardPostpone: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes1))

		evalRes2, _, err := cardPostponePrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("CardPostpone: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes2))
		return query, args, nil
	}
	query, args, err := buildQueryAndArgs()
	if err != nil {
		logger.SetErr(err)
		return nil, err
	}
	logger.SetQuery(query, args)
	if mockExec, mockMatched, mockErr := snapsqlgo.MatchMock(ctx, "CardPostpone"); mockMatched {
		if mockErr != nil {
			logger.SetErr(mockErr)
			return nil, mockErr
		}
		if mockExec.Err != nil {
			logger.SetErr(mockExec.Err)
			return nil, mockExec.Err
		}
		mockResult := mockExec.SQLResult()
		if mockResult != nil {
			result = mockResult
			return result, nil
		}
		if len(mockExec.ExpectedRows()) > 0 {
			mapped, err := snapsqlgo.MapMockExecutionToStruct[any](mockExec)
			if err != nil {
				logger.SetErr(err)
				return nil, fmt.Errorf("CardPostpone: failed to map mock execution: %w", err)
			}
			result = mapped
		}
		return result, nil
	}
	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		err = fmt.Errorf("CardPostpone: failed to prepare statement: %w (query: %s)", err, query)
		logger.SetErr(err)
		return nil, err
	}
	defer stmt.Close()
	// Execute query (no result expected)
	_, err = stmt.ExecContext(ctx, args...)
	if err != nil {
		err = fmt.Errorf("CardPostpone: failed to execute statement: %w", err)
		logger.SetErr(err)
		return nil, err
	}

	return result, nil
}
