//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package query

import (
	"context"
	"fmt"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// CardPostponeResult represents the response structure for CardPostpone
type CardPostponeResult struct {
	AffectedRows int `json:"affected_rows"`
}

// CardPostpone specific CEL programs and mock path
var (
	cardpostponePrograms []cel.Program
)

const cardpostponeMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0: Base environment
	{
		// Build CEL env options then expand variadic at call-site to avoid type inference issues
		opts := []cel.EnvOption{
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
			cel.Variable("src_board_id", cel.IntType),
			cel.Variable("dst_board_id", cel.IntType),
		}
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create CardPostpone CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}

	// Create programs for each expression using the corresponding environment
	cardpostponePrograms = make([]cel.Program, 6)
	// expr_001: "src_board_id" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("src_board_id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "src_board_id", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "src_board_id", err))
		}
		cardpostponePrograms[0] = program
	}
	// expr_002: "dst_board_id" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("dst_board_id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "dst_board_id", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "dst_board_id", err))
		}
		cardpostponePrograms[1] = program
	}
	// expr_003: "src_board_id" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("src_board_id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "src_board_id", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "src_board_id", err))
		}
		cardpostponePrograms[2] = program
	}
	// expr_004: "src_board_id" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("src_board_id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "src_board_id", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "src_board_id", err))
		}
		cardpostponePrograms[3] = program
	}
	// expr_005: "dst_board_id" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("dst_board_id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "dst_board_id", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "dst_board_id", err))
		}
		cardpostponePrograms[4] = program
	}
	// expr_006: "src_board_id" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("src_board_id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "src_board_id", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "src_board_id", err))
		}
		cardpostponePrograms[5] = program
	}
}

// CardPostpone Moves all unfinished cards from a source board to the corresponding lists of a destination board created from templates. The destination list is chosen by matching stage_order; lists in the terminal stage (the maximum stage_order on the source board) retain their cards.
func CardPostpone(ctx context.Context, executor snapsqlgo.DBExecutor, srcBoardID int, dstBoardID int, opts ...snapsqlgo.FuncOpt) (any, error) {
	var result any

	// Hierarchical metas (for nested aggregation code generation - placeholder)
	// Count: 0

	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "cardpostpone", "any")
	// Check for mock mode
	if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
		mockData, err := snapsqlgo.GetMockDataFromFiles(cardpostponeMockPath, funcConfig.MockDataNames)
		if err != nil {
			return nil, fmt.Errorf("CardPostpone: failed to get mock data: %w", err)
		}

		result, err = snapsqlgo.MapMockDataToStruct[any](mockData)
		if err != nil {
			return nil, fmt.Errorf("CardPostpone: failed to map mock data to any struct: %w", err)
		}

		return result, nil
	}
	// Extract implicit parameters
	implicitSpecs := []snapsqlgo.ImplicitParamSpec{
		{Name: "updated_at", Type: "time.Time", Required: false, DefaultValue: "CURRENT_TIMESTAMP"},
	}
	systemValues := snapsqlgo.ExtractImplicitParams(ctx, implicitSpecs)
	_ = systemValues // avoid unused if not referenced in args

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		query := "WITH done_stage AS ( SELECT stage_order AS stage_limit FROM lists  WHERE board_id =$1 ORDER BY stage_order DESC, id DESC LIMIT 1 ), new_list AS ( SELECT id AS new_list_id FROM lists  WHERE board_id =$2 ORDER BY stage_order ASC, id ASC LIMIT 1 ), undone_lists AS ( SELECT old.id AS old_list_id FROM lists AS old  WHERE old.board_id =$3 AND old.stage_order < ( SELECT stage_limit FROM done_stage ) ) UPDATE cards SET list_id = (SELECT new_list_id FROM new_list), updated_at =$4  WHERE list_id IN ( SELECT old_list_id FROM undone_lists )"
		args := make([]any, 0)
		paramMap := map[string]any{
			"src_board_id": srcBoardID,
			"dst_board_id": dstBoardID,
		}

		evalRes0, _, err := cardpostponePrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("CardPostpone: failed to evaluate expression: %w", err)
		}
		args = append(args, evalRes0.Value())

		evalRes1, _, err := cardpostponePrograms[1].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("CardPostpone: failed to evaluate expression: %w", err)
		}
		args = append(args, evalRes1.Value())

		evalRes2, _, err := cardpostponePrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("CardPostpone: failed to evaluate expression: %w", err)
		}
		args = append(args, evalRes2.Value())
		args = append(args, systemValues["updated_at"])

		return query, args, nil
	}
	query, args, err := buildQueryAndArgs()
	if err != nil {
		return nil, err
	}
	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		return nil, fmt.Errorf("CardPostpone: failed to prepare statement: %w", err)
	}
	defer stmt.Close()
	// Execute query (no result expected)
	_, err = stmt.ExecContext(ctx, args...)
	if err != nil {
		return nil, fmt.Errorf("CardPostpone: failed to execute statement: %w", err)
	}

	return result, nil
}
