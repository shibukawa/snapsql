//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package query

import (
	"context"
	"fmt"
	"iter"
	"time"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// ListArchiveResult represents the response structure for ListArchive
type ListArchiveResult struct {
	ID         int       `json:"id"`
	BoardID    int       `json:"board_id"`
	Name       string    `json:"name"`
	StageOrder int       `json:"stage_order"`
	Position   float64   `json:"position"`
	IsArchived int       `json:"is_archived"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// ListArchive specific CEL programs and mock path
var (
	listArchivePrograms []cel.Program
)

const listArchiveMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0 (container: root)
	{
		// Build CEL env options
		opts := []cel.EnvOption{
			cel.Container("root"),
		}
		opts = append(opts, cel.Variable("list_id", cel.IntType))
		opts = append(opts, cel.Variable("is_archived", cel.BoolType))
		opts = append(opts, cel.Variable("list_id", cel.IntType))
		opts = append(opts, cel.Variable("is_archived", cel.BoolType))
		opts = append(opts,
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
		)
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create ListArchive CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}

	// Create programs for each expression using the corresponding environment
	listArchivePrograms = make([]cel.Program, 2)
	// expr_001: "is_archived" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("is_archived")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "is_archived", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "is_archived", err))
		}
		listArchivePrograms[0] = program
	}
	// expr_002: "list_id" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("list_id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "list_id", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "list_id", err))
		}
		listArchivePrograms[1] = program
	}
}

// ListArchive Sets the archive flag on a list, keeping other attributes intact.
func ListArchive(ctx context.Context, executor snapsqlgo.DBExecutor, listID int, isArchived bool, opts ...snapsqlgo.FuncOpt) iter.Seq2[*ListArchiveResult, error] {

	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "listArchive", "[]listarchiveresult")

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		query := "UPDATE lists SET is_archived = $1, updated_at = CURRENT_TIMESTAMP  WHERE id = $2   RETURNING id, board_id, name, stage_order, position, is_archived, created_at, updated_at"
		args := make([]any, 0)
		paramMap := map[string]any{
			"list_id":     listID,
			"is_archived": isArchived,
		}

		evalRes0, _, err := listArchivePrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("ListArchive: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes0))

		evalRes1, _, err := listArchivePrograms[1].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("ListArchive: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes1))
		return query, args, nil
	}
	return func(yield func(*ListArchiveResult, error) bool) {
		query, args, err := buildQueryAndArgs()
		if err != nil {
			_ = yield(nil, err)
			return
		}
		if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
			mockData, err := snapsqlgo.GetMockDataFromFiles(listArchiveMockPath, funcConfig.MockDataNames)
			if err != nil {
				_ = yield(nil, fmt.Errorf("ListArchive: failed to get mock data: %w", err))
				return
			}

			rows, err := snapsqlgo.MapMockDataToStruct[[]ListArchiveResult](mockData)
			if err != nil {
				_ = yield(nil, fmt.Errorf("ListArchive: failed to map mock data to []ListArchiveResult struct: %w", err))
				return
			}

			for i := range rows {
				item := rows[i]
				if !yield(&item, nil) {
					return
				}
			}

			return
		}

		queryLogger := snapsqlgo.QueryLoggerFromContext(ctx, snapsqlgo.QueryLogMetadata{
			FuncName:   "ListArchive",
			SourceFile: "query/ListArchive",
			Dialect:    "sqlite",
			QueryType:  snapsqlgo.QueryLogQueryTypeSelect,
		})
		queryLogInfo := snapsqlgo.QueryLogExecutionInfo{
			QueryType: snapsqlgo.QueryLogQueryTypeSelect,
			Executor:  executor,
		}
		if queryLogger != nil {
			queryLogger.SetQuery(query, args)
		}
		stmt, err := executor.PrepareContext(ctx, query)
		if err != nil {
			_ = yield(nil, fmt.Errorf("ListArchive: failed to prepare statement: %w (query: %s)", err, query))
			return
		}
		defer stmt.Close()

		rows, err := stmt.QueryContext(ctx, args...)
		if err != nil {
			_ = yield(nil, fmt.Errorf("ListArchive: failed to execute query: %w", err))
			return
		}
		defer rows.Close()

		for rows.Next() {
			item := new(ListArchiveResult)
			if err := rows.Scan(
				&item.ID,
				&item.BoardID,
				&item.Name,
				&item.StageOrder,
				&item.Position,
				&item.IsArchived,
				&item.CreatedAt,
				&item.UpdatedAt,
			); err != nil {
				_ = yield(nil, fmt.Errorf("ListArchive: failed to scan row: %w", err))
				return
			}
			if !yield(item, nil) {
				return
			}
		}

		if err := rows.Err(); err != nil {
			_ = yield(nil, fmt.Errorf("ListArchive: error iterating rows: %w", err))
			return
		}
		if queryLogger != nil {
			queryLogger.Finish(queryLogInfo, nil)
		}
	}
}
