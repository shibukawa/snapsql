//go:build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package query

import (
	"context"
	"fmt"
	"iter"
	"time"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// CardUpdateResult represents the response structure for CardUpdate
type CardUpdateResult struct {
	ID          int       `json:"id"`
	ListID      int       `json:"list_id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Position    float64   `json:"position"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// CardUpdate specific CEL programs and mock path
var (
	cardUpdatePrograms []cel.Program
)

const cardUpdateMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0 (container: root)
	{
		// Build CEL env options
		opts := []cel.EnvOption{
			cel.Container("root"),
		}
		opts = append(opts, cel.Variable("card_id", cel.IntType))
		opts = append(opts, cel.Variable("title", cel.StringType))
		opts = append(opts, cel.Variable("description", cel.StringType))
		opts = append(opts, cel.Variable("card_id", cel.IntType))
		opts = append(opts, cel.Variable("title", cel.StringType))
		opts = append(opts, cel.Variable("description", cel.StringType))
		opts = append(opts,
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
		)
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create CardUpdate CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}

	// Create programs for each expression using the corresponding environment
	cardUpdatePrograms = make([]cel.Program, 3)
	// expr_001: "title" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("title")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "title", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "title", err))
		}
		cardUpdatePrograms[0] = program
	}
	// expr_002: "description" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("description")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "description", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "description", err))
		}
		cardUpdatePrograms[1] = program
	}
	// expr_003: "card_id" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("card_id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "card_id", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "card_id", err))
		}
		cardUpdatePrograms[2] = program
	}
}

// CardUpdate Updates the title and description of a card and refreshes its timestamp.
func CardUpdate(ctx context.Context, executor snapsqlgo.DBExecutor, cardID int, title string, description string, opts ...snapsqlgo.FuncOpt) iter.Seq2[*CardUpdateResult, error] {

	execCtx := snapsqlgo.ExtractExecutionContext(ctx)
	rowLockMode := snapsqlgo.RowLockNone
	if execCtx != nil {
		rowLockMode = execCtx.RowLockMode()
	}
	if rowLockMode != snapsqlgo.RowLockNone {
		snapsqlgo.EnsureRowLockAllowed(snapsqlgo.QueryLogQueryTypeExec, rowLockMode)
	}
	rowLockClause := ""
	if rowLockMode != snapsqlgo.RowLockNone {
		var rowLockErr error
		rowLockClause, rowLockErr = snapsqlgo.BuildRowLockClause("sqlite", rowLockMode)
		if rowLockErr != nil {
			panic(rowLockErr)
		}
	}
	queryLogOptions := snapsqlgo.QueryOptionsSnapshot{
		RowLockClause: rowLockClause,
		RowLockMode:   rowLockMode,
	}

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		query := "UPDATE cards SET title = $1, description = $2, updated_at = CURRENT_TIMESTAMP  WHERE id = $3   RETURNING id, list_id, title, description, position, created_at, updated_at"
		args := make([]any, 0)
		paramMap := map[string]any{
			"card_id":     cardID,
			"title":       title,
			"description": description,
		}

		evalRes0, _, err := cardUpdatePrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("CardUpdate: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes0))

		evalRes1, _, err := cardUpdatePrograms[1].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("CardUpdate: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes1))

		evalRes2, _, err := cardUpdatePrograms[2].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("CardUpdate: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes2))
		return query, args, nil
	}
	return func(yield func(*CardUpdateResult, error) bool) {
		logger := execCtx.QueryLogger()
		defer logger.Write(ctx, func() (snapsqlgo.QueryLogMetadata, snapsqlgo.DBExecutor) {
			return snapsqlgo.QueryLogMetadata{
				FuncName:   "CardUpdate",
				SourceFile: "query/CardUpdate",
				Dialect:    "sqlite",
				QueryType:  snapsqlgo.QueryLogQueryTypeExec,
				Options:    queryLogOptions,
			}, executor
		})

		query, args, err := buildQueryAndArgs()
		if err != nil {
			logger.SetErr(err)
			_ = yield(nil, err)
			return
		}
		logger.SetQuery(query, args)
		if mockExec, mockMatched, mockErr := snapsqlgo.MatchMock(ctx, "CardUpdate"); mockMatched {
			if mockErr != nil {
				logger.SetErr(mockErr)
				_ = yield(nil, mockErr)
				return
			}
			if mockExec.Err != nil {
				logger.SetErr(mockExec.Err)
				_ = yield(nil, mockExec.Err)
				return
			}

			mapped, err := snapsqlgo.MapMockExecutionToSlice[CardUpdateResult](mockExec)
			if err != nil {
				logger.SetErr(err)
				_ = yield(nil, fmt.Errorf("CardUpdate: failed to map mock execution: %w", err))
				return
			}

			for i := range mapped {
				item := mapped[i]
				if !yield(&item, nil) {
					return
				}
			}

			return
		}
		stmt, err := executor.PrepareContext(ctx, query)
		if err != nil {
			err = fmt.Errorf("CardUpdate: failed to prepare statement: %w (query: %s)", err, query)
			logger.SetErr(err)
			_ = yield(nil, err)
			return
		}
		defer stmt.Close()

		rows, err := stmt.QueryContext(ctx, args...)
		if err != nil {
			err = fmt.Errorf("CardUpdate: failed to execute query: %w", err)
			logger.SetErr(err)
			_ = yield(nil, err)
			return
		}
		defer rows.Close()

		for rows.Next() {
			item := new(CardUpdateResult)
			if err := rows.Scan(
				&item.ID,
				&item.ListID,
				&item.Title,
				&item.Description,
				&item.Position,
				&item.CreatedAt,
				&item.UpdatedAt,
			); err != nil {
				err = fmt.Errorf("CardUpdate: failed to scan row: %w", err)
				logger.SetErr(err)
				_ = yield(nil, err)
				return
			}
			if !yield(item, nil) {
				return
			}
		}

		if err := rows.Err(); err != nil {
			err = fmt.Errorf("CardUpdate: error iterating rows: %w", err)
			logger.SetErr(err)
			_ = yield(nil, err)
			return
		}
	}
}
