//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package query

import (
	"context"
	"fmt"
	"time"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// CreateNotificationResult represents the response structure for CreateNotification
type CreateNotificationResult struct {
	ID         int        `json:"id"`
	Title      string     `json:"title"`
	Body       string     `json:"body"`
	Important  *bool      `json:"important"`
	Cancelable *bool      `json:"cancelable"`
	IconUrl    *string    `json:"icon_url"`
	ExpiresAt  *time.Time `json:"expires_at"`
	CreatedAt  *time.Time `json:"created_at"`
}

// CreateNotification specific CEL programs and mock path
var (
	createNotificationPrograms []cel.Program
)

const createNotificationMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0 (container: root)
	{
		// Build CEL env options
		opts := []cel.EnvOption{
			cel.Container("root"),
		}
		opts = append(opts, cel.Variable("title", cel.StringType))
		opts = append(opts, cel.Variable("body", cel.StringType))
		opts = append(opts, cel.Variable("important", cel.BoolType))
		opts = append(opts, cel.Variable("cancelable", cel.BoolType))
		opts = append(opts, cel.Variable("icon_url", cel.StringType))
		opts = append(opts, cel.Variable("expires_at", cel.TimestampType))
		opts = append(opts,
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
		)
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create CreateNotification CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}

	// Create programs for each expression using the corresponding environment
	createNotificationPrograms = make([]cel.Program, 6)
	// expr_001: "title" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("title")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "title", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "title", err))
		}
		createNotificationPrograms[0] = program
	}
	// expr_002: "body" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("body")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "body", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "body", err))
		}
		createNotificationPrograms[1] = program
	}
	// expr_003: "important" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("important")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "important", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "important", err))
		}
		createNotificationPrograms[2] = program
	}
	// expr_004: "cancelable" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("cancelable")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "cancelable", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "cancelable", err))
		}
		createNotificationPrograms[3] = program
	}
	// expr_005: "icon_url" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("icon_url")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "icon_url", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "icon_url", err))
		}
		createNotificationPrograms[4] = program
	}
	// expr_006: "expires_at" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("expires_at")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "expires_at", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "expires_at", err))
		}
		createNotificationPrograms[5] = program
	}
}

// CreateNotification 新しい通知を作成します。通知のタイトル、本文、重要度、キャンセル可能フラグ、アイコンURL、有効期限を指定できます。
func CreateNotification(ctx context.Context, executor snapsqlgo.DBExecutor, title string, body string, important bool, cancelable bool, iconUrl string, expiresAt time.Time, opts ...snapsqlgo.FuncOpt) (CreateNotificationResult, error) {
	var result CreateNotificationResult

	// Hierarchical metas (for nested aggregation code generation - placeholder)
	// Count: 0

	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "createNotification", "createnotificationresult")
	// Check for mock mode
	if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
		mockData, err := snapsqlgo.GetMockDataFromFiles(createNotificationMockPath, funcConfig.MockDataNames)
		if err != nil {
			return result, fmt.Errorf("CreateNotification: failed to get mock data: %w", err)
		}

		result, err = snapsqlgo.MapMockDataToStruct[CreateNotificationResult](mockData)
		if err != nil {
			return result, fmt.Errorf("CreateNotification: failed to map mock data to CreateNotificationResult struct: %w", err)
		}

		return result, nil
	}
	// Extract implicit parameters
	implicitSpecs := []snapsqlgo.ImplicitParamSpec{
		{Name: "created_at", Type: "time.Time", Required: false, DefaultValue: "CURRENT_TIMESTAMP"},
		{Name: "updated_at", Type: "time.Time", Required: false, DefaultValue: "CURRENT_TIMESTAMP"},
	}
	systemValues := snapsqlgo.ExtractImplicitParams(ctx, implicitSpecs)
	_ = systemValues // avoid unused if not referenced in args

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		query := "INSERT INTO notifications ( title, body, important, cancelable, icon_url, expires_at , created_at, updated_at) VALUES ($1,$2,$3,$4,$5,$6, $7, $8)  RETURNING id, title, body, important, cancelable, icon_url, expires_at, created_at"
		args := make([]any, 0)
		paramMap := map[string]any{
			"title":      title,
			"body":       body,
			"important":  important,
			"cancelable": cancelable,
			"icon_url":   iconUrl,
			"expires_at": snapsqlgo.NormalizeNullableTimestamp(expiresAt),
		}

		evalRes0, _, err := createNotificationPrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("CreateNotification: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes0))

		evalRes1, _, err := createNotificationPrograms[1].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("CreateNotification: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes1))

		evalRes2, _, err := createNotificationPrograms[2].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("CreateNotification: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes2))

		evalRes3, _, err := createNotificationPrograms[3].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("CreateNotification: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes3))

		evalRes4, _, err := createNotificationPrograms[4].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("CreateNotification: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes4))

		evalRes5, _, err := createNotificationPrograms[5].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("CreateNotification: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes5))
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(systemValues["created_at"]))

		args = append(args, snapsqlgo.NormalizeNullableTimestamp(systemValues["updated_at"]))

		return query, args, nil
	}
	query, args, err := buildQueryAndArgs()
	if err != nil {
		return result, err
	}
	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		return result, fmt.Errorf("CreateNotification: failed to prepare statement: %w (query: %s)", err, query)
	}
	defer stmt.Close()
	// Execute query and scan single row
	row := stmt.QueryRowContext(ctx, args...)
	err = row.Scan(
		&result.ID,
		&result.Title,
		&result.Body,
		&result.Important,
		&result.Cancelable,
		&result.IconUrl,
		&result.ExpiresAt,
		&result.CreatedAt,
	)
	if err != nil {
		return result, fmt.Errorf("failed to scan row: %w", err)
	}

	return result, nil
}
