//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package query

import (
	"context"
	"fmt"
	"iter"
	"strings"
	"time"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// ListUserNotificationsResult represents the response structure for ListUserNotifications
type ListUserNotificationsResult struct {
	NID         int        `json:"n.id"`
	NTitle      string     `json:"n.title"`
	NBody       string     `json:"n.body"`
	NIconUrl    *string    `json:"n.icon_url"`
	NImportant  *bool      `json:"n.important"`
	NCancelable *bool      `json:"n.cancelable"`
	NExpiresAt  *time.Time `json:"n.expires_at"`
	NCreatedAt  *time.Time `json:"n.created_at"`
	NUpdatedAt  *time.Time `json:"n.updated_at"`
	IReadAt     *time.Time `json:"i.read_at"`
	DeliveredAt *time.Time `json:"delivered_at"`
}

// ListUserNotifications specific CEL programs and mock path
var (
	listUserNotificationsPrograms []cel.Program
)

const listUserNotificationsMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0 (container: root)
	{
		// Build CEL env options
		opts := []cel.EnvOption{
			cel.Container("root"),
		}
		opts = append(opts, cel.Variable("user_id", cel.StringType))
		opts = append(opts, cel.Variable("unread_only", cel.BoolType))
		opts = append(opts, cel.Variable("since", cel.TimestampType))
		opts = append(opts,
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
		)
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create ListUserNotifications CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}

	// Create programs for each expression using the corresponding environment
	listUserNotificationsPrograms = make([]cel.Program, 4)
	// expr_001: "user_id" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("user_id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "user_id", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "user_id", err))
		}
		listUserNotificationsPrograms[0] = program
	}
	// expr_002: "unread_only" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("unread_only")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "unread_only", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "unread_only", err))
		}
		listUserNotificationsPrograms[1] = program
	}
	// expr_003: "since" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("since")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "since", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "since", err))
		}
		listUserNotificationsPrograms[2] = program
	}
	// expr_004: "since" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("since")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "since", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "since", err))
		}
		listUserNotificationsPrograms[3] = program
	}
}

// ListUserNotifications ユーザーの受信箱にある通知一覧を取得します。未読/既読、重要度、有効期限でフィルタリングでき、ページネーションに対応しています。キャンセルされた通知は除外されます。
func ListUserNotifications(ctx context.Context, executor snapsqlgo.DBExecutor, userID string, unreadOnly bool, since time.Time, opts ...snapsqlgo.FuncOpt) iter.Seq2[*ListUserNotificationsResult, error] {

	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "listUserNotifications", "[]listusernotificationsresult")

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		var builder strings.Builder
		args := make([]any, 0)
		var boundaryNeeded bool
		paramMap := map[string]any{
			"user_id":     userID,
			"unread_only": unreadOnly,
			"since":       since,
		}
		{ // append static fragment
			_frag := "SELECT n.id, n.title, n.body, n.icon_url, n.important, n.cancelable, n.expires_at, n.created_at, n.updated_at, i.read_at, i.created_at as delivered_at FROM inbox i JOIN notifications n ON i.notification_id = n.id  WHERE i.user_id =$1"
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}
		boundaryNeeded = true
		// Evaluate expression 0
		evalRes0, _, err := listUserNotificationsPrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("ListUserNotifications: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes0))
		// IF condition: expression 1
		condResult, _, err := listUserNotificationsPrograms[1].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("ListUserNotifications: failed to evaluate condition: %w", err)
		}
		if snapsqlgo.Truthy(condResult) {
			if boundaryNeeded {
				builder.WriteString(" AND ")
			}
			{ // append static fragment
				_frag := "i.read_at IS NULL"
				if builder.Len() > 0 {
					builder.WriteByte(' ')
				}
				builder.WriteString(_frag)
			}
			boundaryNeeded = true
		}
		// IF condition: expression 2
		condResult, _, err = listUserNotificationsPrograms[2].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("ListUserNotifications: failed to evaluate condition: %w", err)
		}
		if snapsqlgo.Truthy(condResult) {
			if boundaryNeeded {
				builder.WriteString(" AND ")
			}
			{ // append static fragment
				_frag := "i.updated_at >$2"
				if builder.Len() > 0 {
					builder.WriteByte(' ')
				}
				builder.WriteString(_frag)
			}
			boundaryNeeded = true
			// Evaluate expression 2
			evalRes1, _, err := listUserNotificationsPrograms[2].Eval(paramMap)
			if err != nil {
				return "", nil, fmt.Errorf("ListUserNotifications: failed to evaluate expression: %w", err)
			}
			args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes1))
		}
		{ // append static fragment
			_frag := "AND n.canceled_at IS NULL AND (n.expires_at IS NULL OR n.expires_at > NOW("
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}
		boundaryNeeded = true
		boundaryNeeded = false
		{ // append static fragment
			_frag := ")) ORDER BY i.updated_at DESC"
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}
		boundaryNeeded = true

		query := strings.TrimSpace(builder.String())
		return query, args, nil
	}
	return func(yield func(*ListUserNotificationsResult, error) bool) {
		query, args, err := buildQueryAndArgs()
		if err != nil {
			_ = yield(nil, err)
			return
		}
		if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
			mockData, err := snapsqlgo.GetMockDataFromFiles(listUserNotificationsMockPath, funcConfig.MockDataNames)
			if err != nil {
				_ = yield(nil, fmt.Errorf("ListUserNotifications: failed to get mock data: %w", err))
				return
			}

			rows, err := snapsqlgo.MapMockDataToStruct[[]ListUserNotificationsResult](mockData)
			if err != nil {
				_ = yield(nil, fmt.Errorf("ListUserNotifications: failed to map mock data to []ListUserNotificationsResult struct: %w", err))
				return
			}

			for i := range rows {
				item := rows[i]
				if !yield(&item, nil) {
					return
				}
			}

			return
		}
		stmt, err := executor.PrepareContext(ctx, query)
		if err != nil {
			_ = yield(nil, fmt.Errorf("ListUserNotifications: failed to prepare statement: %w (query: %s)", err, query))
			return
		}
		defer stmt.Close()

		rows, err := stmt.QueryContext(ctx, args...)
		if err != nil {
			_ = yield(nil, fmt.Errorf("ListUserNotifications: failed to execute query: %w", err))
			return
		}
		defer rows.Close()

		for rows.Next() {
			item := new(ListUserNotificationsResult)
			if err := rows.Scan(
				&item.NID,
				&item.NTitle,
				&item.NBody,
				&item.NIconUrl,
				&item.NImportant,
				&item.NCancelable,
				&item.NExpiresAt,
				&item.NCreatedAt,
				&item.NUpdatedAt,
				&item.IReadAt,
				&item.DeliveredAt,
			); err != nil {
				_ = yield(nil, fmt.Errorf("ListUserNotifications: failed to scan row: %w", err))
				return
			}
			if !yield(item, nil) {
				return
			}
		}

		if err := rows.Err(); err != nil {
			_ = yield(nil, fmt.Errorf("ListUserNotifications: error iterating rows: %w", err))
			return
		}
	}
}
