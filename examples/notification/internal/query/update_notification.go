//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package query

import (
	"context"
	"fmt"
	"iter"
	"time"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// UpdateNotificationResult represents the response structure for UpdateNotification
type UpdateNotificationResult struct {
	ID         int        `json:"id"`
	Title      string     `json:"title"`
	Body       string     `json:"body"`
	Important  *bool      `json:"important"`
	Cancelable *bool      `json:"cancelable"`
	IconUrl    *string    `json:"icon_url"`
	ExpiresAt  *time.Time `json:"expires_at"`
	CreatedAt  *time.Time `json:"created_at"`
	UpdatedAt  *time.Time `json:"updated_at"`
}

// UpdateNotification specific CEL programs and mock path
var (
	updateNotificationPrograms []cel.Program
)

const updateNotificationMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0 (container: root)
	{
		// Build CEL env options
		opts := []cel.EnvOption{
			cel.Container("root"),
		}
		opts = append(opts, cel.Variable("notification_id", cel.IntType))
		opts = append(opts, cel.Variable("title", cel.StringType))
		opts = append(opts, cel.Variable("body", cel.StringType))
		opts = append(opts, cel.Variable("important", cel.BoolType))
		opts = append(opts,
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
		)
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create UpdateNotification CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}

	// Create programs for each expression using the corresponding environment
	updateNotificationPrograms = make([]cel.Program, 4)
	// expr_001: "title" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("title")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "title", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "title", err))
		}
		updateNotificationPrograms[0] = program
	}
	// expr_002: "body" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("body")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "body", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "body", err))
		}
		updateNotificationPrograms[1] = program
	}
	// expr_003: "important" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("important")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "important", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "important", err))
		}
		updateNotificationPrograms[2] = program
	}
	// expr_004: "notification_id" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("notification_id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "notification_id", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "notification_id", err))
		}
		updateNotificationPrograms[3] = program
	}
}

// UpdateNotification 通知のタイトル、本文、重要度フラグを更新します。
func UpdateNotification(ctx context.Context, executor snapsqlgo.DBExecutor, notificationID int, title string, body string, important bool, opts ...snapsqlgo.FuncOpt) iter.Seq2[*UpdateNotificationResult, error] {

	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "updateNotification", "[]updatenotificationresult")
	// Extract implicit parameters
	implicitSpecs := []snapsqlgo.ImplicitParamSpec{
		{Name: "updated_at", Type: "time.Time", Required: false, DefaultValue: "CURRENT_TIMESTAMP"},
	}
	systemValues := snapsqlgo.ExtractImplicitParams(ctx, implicitSpecs)
	_ = systemValues // avoid unused if not referenced in args

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		query := "UPDATE notifications SET title =$1, body =$2, important =$3, updated_at =$4  WHERE id =$5  RETURNING id, title, body, important, cancelable, icon_url, expires_at, created_at, updated_at"
		args := make([]any, 0)
		paramMap := map[string]any{
			"notification_id": notificationID,
			"title":           title,
			"body":            body,
			"important":       important,
		}

		evalRes0, _, err := updateNotificationPrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("UpdateNotification: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes0))

		evalRes1, _, err := updateNotificationPrograms[1].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("UpdateNotification: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes1))

		evalRes2, _, err := updateNotificationPrograms[2].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("UpdateNotification: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes2))
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(systemValues["updated_at"]))

		evalRes4, _, err := updateNotificationPrograms[3].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("UpdateNotification: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes4))
		return query, args, nil
	}
	return func(yield func(*UpdateNotificationResult, error) bool) {
		query, args, err := buildQueryAndArgs()
		if err != nil {
			_ = yield(nil, err)
			return
		}
		if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
			mockData, err := snapsqlgo.GetMockDataFromFiles(updateNotificationMockPath, funcConfig.MockDataNames)
			if err != nil {
				_ = yield(nil, fmt.Errorf("UpdateNotification: failed to get mock data: %w", err))
				return
			}

			rows, err := snapsqlgo.MapMockDataToStruct[[]UpdateNotificationResult](mockData)
			if err != nil {
				_ = yield(nil, fmt.Errorf("UpdateNotification: failed to map mock data to []UpdateNotificationResult struct: %w", err))
				return
			}

			for i := range rows {
				item := rows[i]
				if !yield(&item, nil) {
					return
				}
			}

			return
		}
		stmt, err := executor.PrepareContext(ctx, query)
		if err != nil {
			_ = yield(nil, fmt.Errorf("UpdateNotification: failed to prepare statement: %w (query: %s)", err, query))
			return
		}
		defer stmt.Close()

		rows, err := stmt.QueryContext(ctx, args...)
		if err != nil {
			_ = yield(nil, fmt.Errorf("UpdateNotification: failed to execute query: %w", err))
			return
		}
		defer rows.Close()

		for rows.Next() {
			item := new(UpdateNotificationResult)
			if err := rows.Scan(
				&item.ID,
				&item.Title,
				&item.Body,
				&item.Important,
				&item.Cancelable,
				&item.IconUrl,
				&item.ExpiresAt,
				&item.CreatedAt,
				&item.UpdatedAt,
			); err != nil {
				_ = yield(nil, fmt.Errorf("UpdateNotification: failed to scan row: %w", err))
				return
			}
			if !yield(item, nil) {
				return
			}
		}

		if err := rows.Err(); err != nil {
			_ = yield(nil, fmt.Errorf("UpdateNotification: error iterating rows: %w", err))
			return
		}
	}
}
