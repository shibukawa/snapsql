//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package query

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// DeliverNotificationResult represents the response structure for DeliverNotification
type DeliverNotificationResult struct {
	NotificationID int        `json:"notification_id"`
	UserID         string     `json:"user_id"`
	ReadAt         *time.Time `json:"read_at"`
	CreatedAt      *time.Time `json:"created_at"`
}

// DeliverNotification specific CEL programs and mock path
var (
	deliverNotificationPrograms []cel.Program
)

const deliverNotificationMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 2)
	// Environment 0 (container: root)
	{
		// Build CEL env options
		opts := []cel.EnvOption{
			cel.Container("root"),
		}
		opts = append(opts, cel.Variable("notification_id", cel.IntType))
		opts = append(opts, cel.Variable("user_ids", cel.ListType(cel.StringType)))
		opts = append(opts,
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
		)
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create DeliverNotification CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}
	// Environment 1 (container: for user_id : user_ids)
	{
		// Build CEL env options
		opts := []cel.EnvOption{
			cel.Container("for user_id : user_ids"),
		}
		opts = append(opts, cel.Variable("user_id", cel.AnyType))
		env1, err := celEnvironments[0].Extend(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create DeliverNotification CEL environment 1: %v", err))
		}
		celEnvironments[1] = env1
	}

	// Create programs for each expression using the corresponding environment
	deliverNotificationPrograms = make([]cel.Program, 3)
	// expr_001: "user_ids" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("user_ids")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "user_ids", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "user_ids", err))
		}
		deliverNotificationPrograms[0] = program
	}
	// expr_002: "notification_id" using environment 1
	{
		ast, issues := celEnvironments[1].Compile("notification_id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "notification_id", issues.Err()))
		}
		program, err := celEnvironments[1].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "notification_id", err))
		}
		deliverNotificationPrograms[1] = program
	}
	// expr_003: "user_id" using environment 1
	{
		ast, issues := celEnvironments[1].Compile("user_id")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "user_id", issues.Err()))
		}
		program, err := celEnvironments[1].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "user_id", err))
		}
		deliverNotificationPrograms[2] = program
	}
}

// DeliverNotification 特定の通知を複数のユーザーの受信箱に一括配信します。既に配信済みのユーザーには何もしません。
func DeliverNotification(ctx context.Context, executor snapsqlgo.DBExecutor, notificationID int, userIds []string, opts ...snapsqlgo.FuncOpt) (DeliverNotificationResult, error) {
	var result DeliverNotificationResult

	// Hierarchical metas (for nested aggregation code generation - placeholder)
	// Count: 0

	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "deliverNotification", "delivernotificationresult")
	// Check for mock mode
	if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
		mockData, err := snapsqlgo.GetMockDataFromFiles(deliverNotificationMockPath, funcConfig.MockDataNames)
		if err != nil {
			return result, fmt.Errorf("DeliverNotification: failed to get mock data: %w", err)
		}

		result, err = snapsqlgo.MapMockDataToStruct[DeliverNotificationResult](mockData)
		if err != nil {
			return result, fmt.Errorf("DeliverNotification: failed to map mock data to DeliverNotificationResult struct: %w", err)
		}

		return result, nil
	}
	// Extract implicit parameters
	implicitSpecs := []snapsqlgo.ImplicitParamSpec{
		{Name: "created_at", Type: "time.Time", Required: false, DefaultValue: "CURRENT_TIMESTAMP"},
		{Name: "updated_at", Type: "time.Time", Required: false, DefaultValue: "CURRENT_TIMESTAMP"},
	}
	systemValues := snapsqlgo.ExtractImplicitParams(ctx, implicitSpecs)
	_ = systemValues // avoid unused if not referenced in args

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		var builder strings.Builder
		args := make([]any, 0)
		paramMap := map[string]any{
			"notification_id": notificationID,
			"user_ids":        userIds,
		}
		{ // append static fragment
			_frag := "INSERT INTO inbox ( notification_id, user_id , created_at, updated_at) VALUES"
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}
		// FOR loop: evaluate collection expression 0
		collectionResult0, _, err := deliverNotificationPrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("DeliverNotification: failed to evaluate collection: %w", err)
		}
		for user_idLoopVar, user_idIsLast := range snapsqlgo.AsIterableAnyWithLast(collectionResult0.Value()) {
			paramMap["user_id"] = user_idLoopVar
			{ // append static fragment
				_frag := "($1"
				if builder.Len() > 0 {
					builder.WriteByte(' ')
				}
				builder.WriteString(_frag)
			}
			// Evaluate expression 1
			evalRes0, _, err := deliverNotificationPrograms[1].Eval(paramMap)
			if err != nil {
				return "", nil, fmt.Errorf("DeliverNotification: failed to evaluate expression: %w", err)
			}
			args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes0))
			{ // append static fragment
				_frag := ",$2"
				if builder.Len() > 0 {
					builder.WriteByte(' ')
				}
				builder.WriteString(_frag)
			}
			// Evaluate expression 2
			evalRes1, _, err := deliverNotificationPrograms[2].Eval(paramMap)
			if err != nil {
				return "", nil, fmt.Errorf("DeliverNotification: failed to evaluate expression: %w", err)
			}
			args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes1))
			{ // append static fragment
				_frag := ", $3"
				if builder.Len() > 0 {
					builder.WriteByte(' ')
				}
				builder.WriteString(_frag)
			}
			// Add system parameter: created_at
			args = append(args, snapsqlgo.NormalizeNullableTimestamp(systemValues["created_at"]))
			{ // append static fragment
				_frag := ", $4"
				if builder.Len() > 0 {
					builder.WriteByte(' ')
				}
				builder.WriteString(_frag)
			}
			// Add system parameter: updated_at
			args = append(args, snapsqlgo.NormalizeNullableTimestamp(systemValues["updated_at"]))
			{ // append static fragment
				_frag := ")"
				if builder.Len() > 0 {
					builder.WriteByte(' ')
				}
				builder.WriteString(_frag)
			}
			if !user_idIsLast {
				builder.WriteString(",")
			}
		}
		{ // append static fragment
			_frag := " RETURNING notification_id, user_id, read_at, created_at"
			if builder.Len() > 0 {
				builder.WriteByte(' ')
			}
			builder.WriteString(_frag)
		}

		query := strings.TrimSpace(builder.String())
		return query, args, nil
	}
	query, args, err := buildQueryAndArgs()
	if err != nil {
		return result, err
	}
	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		return result, fmt.Errorf("DeliverNotification: failed to prepare statement: %w (query: %s)", err, query)
	}
	defer stmt.Close()
	// Execute query and scan single row
	row := stmt.QueryRowContext(ctx, args...)
	err = row.Scan(
		&result.NotificationID,
		&result.UserID,
		&result.ReadAt,
		&result.CreatedAt,
	)
	if err != nil {
		return result, fmt.Errorf("failed to scan row: %w", err)
	}

	return result, nil
}
