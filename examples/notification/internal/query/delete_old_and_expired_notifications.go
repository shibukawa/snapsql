//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by snapsql. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package query

import (
	"context"
	"fmt"
	"time"

	"github.com/google/cel-go/cel"
	"github.com/shibukawa/snapsql/langs/snapsqlgo"
)

// DeleteOldAndExpiredNotificationsResult represents the response structure for DeleteOldAndExpiredNotifications
type DeleteOldAndExpiredNotificationsResult struct {
	AffectedRows int `json:"affected_rows"`
}

// DeleteOldAndExpiredNotifications specific CEL programs and mock path
var (
	deleteOldAndExpiredNotificationsPrograms []cel.Program
)

const deleteOldAndExpiredNotificationsMockPath = ""

func init() {

	// CEL environments based on intermediate format
	celEnvironments := make([]*cel.Env, 1)
	// Environment 0 (container: root)
	{
		// Build CEL env options
		opts := []cel.EnvOption{
			cel.Container("root"),
		}
		opts = append(opts, cel.Variable("before", cel.TimestampType))
		opts = append(opts,
			cel.HomogeneousAggregateLiterals(),
			cel.EagerlyValidateDeclarations(true),
			snapsqlgo.DecimalLibrary,
		)
		env0, err := cel.NewEnv(opts...)
		if err != nil {
			panic(fmt.Sprintf("failed to create DeleteOldAndExpiredNotifications CEL environment 0: %v", err))
		}
		celEnvironments[0] = env0
	}

	// Create programs for each expression using the corresponding environment
	deleteOldAndExpiredNotificationsPrograms = make([]cel.Program, 1)
	// expr_001: "before" using environment 0
	{
		ast, issues := celEnvironments[0].Compile("before")
		if issues != nil && issues.Err() != nil {
			panic(fmt.Sprintf("failed to compile CEL expression %q: %v", "before", issues.Err()))
		}
		program, err := celEnvironments[0].Program(ast)
		if err != nil {
			panic(fmt.Sprintf("failed to create CEL program for %q: %v", "before", err))
		}
		deleteOldAndExpiredNotificationsPrograms[0] = program
	}
}

// DeleteOldAndExpiredNotifications 古い通知と有効期限切れの通知を削除します。バッチ処理でのデータクリーンアップ用です。指定日時以前に作成された通知有効期限（expires_at）を過ぎた通知 どちらかの条件に該当する通知とその受信箱データを削除します。
func DeleteOldAndExpiredNotifications(ctx context.Context, executor snapsqlgo.DBExecutor, before time.Time, opts ...snapsqlgo.FuncOpt) (any, error) {
	var result any

	// Hierarchical metas (for nested aggregation code generation - placeholder)
	// Count: 0

	funcConfig := snapsqlgo.GetFunctionConfig(ctx, "deleteOldAndExpiredNotifications", "any")
	// Check for mock mode
	if funcConfig != nil && len(funcConfig.MockDataNames) > 0 {
		mockData, err := snapsqlgo.GetMockDataFromFiles(deleteOldAndExpiredNotificationsMockPath, funcConfig.MockDataNames)
		if err != nil {
			return nil, fmt.Errorf("DeleteOldAndExpiredNotifications: failed to get mock data: %w", err)
		}

		result, err = snapsqlgo.MapMockDataToStruct[any](mockData)
		if err != nil {
			return nil, fmt.Errorf("DeleteOldAndExpiredNotifications: failed to map mock data to any struct: %w", err)
		}

		return result, nil
	}

	// Build SQL
	buildQueryAndArgs := func() (string, []any, error) {
		query := "DELETE FROM notifications  WHERE created_at <$1 OR (expires_at IS NOT NULL AND expires_at <= CURRENT_TIMESTAMP)"
		args := make([]any, 0)
		paramMap := map[string]any{
			"before": snapsqlgo.NormalizeNullableTimestamp(before),
		}

		evalRes0, _, err := deleteOldAndExpiredNotificationsPrograms[0].Eval(paramMap)
		if err != nil {
			return "", nil, fmt.Errorf("DeleteOldAndExpiredNotifications: failed to evaluate expression: %w", err)
		}
		args = append(args, snapsqlgo.NormalizeNullableTimestamp(evalRes0))
		return query, args, nil
	}
	query, args, err := buildQueryAndArgs()
	if err != nil {
		return nil, err
	}
	// Execute query
	stmt, err := executor.PrepareContext(ctx, query)
	if err != nil {
		return nil, fmt.Errorf("DeleteOldAndExpiredNotifications: failed to prepare statement: %w (query: %s)", err, query)
	}
	defer stmt.Close()
	// Execute query (no result expected)
	_, err = stmt.ExecContext(ctx, args...)
	if err != nil {
		return nil, fmt.Errorf("DeleteOldAndExpiredNotifications: failed to execute statement: %w", err)
	}

	return result, nil
}
